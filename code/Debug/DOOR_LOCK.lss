
DOOR_LOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00002aa6  00002b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800116  00800116  00002bf0  2**0
                  ALLOC
  3 .stab         00002598  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cff  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000081bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000092bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a240  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a682  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <main>
      8a:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e ef       	ldi	r22, 0xFE	; 254
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <store_init_password>:
static unint8 Correct_Password_buffer[SIZE_OF_PASSWARD ];

/******************************static function***************************************************/

static void store_init_password(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	ac 97       	sbiw	r28, 0x2c	; 44
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	unint8 i , val;
	 EEPROM_readByte(0x0000, &val);  /* Read 0x0F from the external EEPROM */
     cb2:	9e 01       	movw	r18, r28
     cb4:	24 5d       	subi	r18, 0xD4	; 212
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	b9 01       	movw	r22, r18
     cbe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <EEPROM_readByte>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a0 e2       	ldi	r26, 0x20	; 32
     cc8:	b1 e4       	ldi	r27, 0x41	; 65
     cca:	8f a3       	std	Y+39, r24	; 0x27
     ccc:	98 a7       	std	Y+40, r25	; 0x28
     cce:	a9 a7       	std	Y+41, r26	; 0x29
     cd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	6f a1       	ldd	r22, Y+39	; 0x27
     cd4:	78 a5       	ldd	r23, Y+40	; 0x28
     cd6:	89 a5       	ldd	r24, Y+41	; 0x29
     cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a e7       	ldi	r20, 0x7A	; 122
     ce0:	53 e4       	ldi	r21, 0x43	; 67
     ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8b a3       	std	Y+35, r24	; 0x23
     cec:	9c a3       	std	Y+36, r25	; 0x24
     cee:	ad a3       	std	Y+37, r26	; 0x25
     cf0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cf2:	6b a1       	ldd	r22, Y+35	; 0x23
     cf4:	7c a1       	ldd	r23, Y+36	; 0x24
     cf6:	8d a1       	ldd	r24, Y+37	; 0x25
     cf8:	9e a1       	ldd	r25, Y+38	; 0x26
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <store_init_password+0x76>
		__ticks = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9a a3       	std	Y+34, r25	; 0x22
     d10:	89 a3       	std	Y+33, r24	; 0x21
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <store_init_password+0xf4>
	else if (__tmp > 65535)
     d14:	6b a1       	ldd	r22, Y+35	; 0x23
     d16:	7c a1       	ldd	r23, Y+36	; 0x24
     d18:	8d a1       	ldd	r24, Y+37	; 0x25
     d1a:	9e a1       	ldd	r25, Y+38	; 0x26
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	4f e7       	ldi	r20, 0x7F	; 127
     d22:	57 e4       	ldi	r21, 0x47	; 71
     d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <store_init_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	6f a1       	ldd	r22, Y+39	; 0x27
     d2e:	78 a5       	ldd	r23, Y+40	; 0x28
     d30:	89 a5       	ldd	r24, Y+41	; 0x29
     d32:	9a a5       	ldd	r25, Y+42	; 0x2a
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e2       	ldi	r20, 0x20	; 32
     d3a:	51 e4       	ldi	r21, 0x41	; 65
     d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9a a3       	std	Y+34, r25	; 0x22
     d52:	89 a3       	std	Y+33, r24	; 0x21
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <store_init_password+0xd6>
     d56:	89 e1       	ldi	r24, 0x19	; 25
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	98 a3       	std	Y+32, r25	; 0x20
     d5c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d60:	98 a1       	ldd	r25, Y+32	; 0x20
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <store_init_password+0xc4>
     d66:	98 a3       	std	Y+32, r25	; 0x20
     d68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6a:	89 a1       	ldd	r24, Y+33	; 0x21
     d6c:	9a a1       	ldd	r25, Y+34	; 0x22
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9a a3       	std	Y+34, r25	; 0x22
     d72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	89 a1       	ldd	r24, Y+33	; 0x21
     d76:	9a a1       	ldd	r25, Y+34	; 0x22
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	69 f7       	brne	.-38     	; 0xd56 <store_init_password+0xb8>
     d7c:	14 c0       	rjmp	.+40     	; 0xda6 <store_init_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7e:	6b a1       	ldd	r22, Y+35	; 0x23
     d80:	7c a1       	ldd	r23, Y+36	; 0x24
     d82:	8d a1       	ldd	r24, Y+37	; 0x25
     d84:	9e a1       	ldd	r25, Y+38	; 0x26
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9a a3       	std	Y+34, r25	; 0x22
     d90:	89 a3       	std	Y+33, r24	; 0x21
     d92:	89 a1       	ldd	r24, Y+33	; 0x21
     d94:	9a a1       	ldd	r25, Y+34	; 0x22
     d96:	9e 8f       	std	Y+30, r25	; 0x1e
     d98:	8d 8f       	std	Y+29, r24	; 0x1d
     d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <store_init_password+0x100>
     da2:	9e 8f       	std	Y+30, r25	; 0x1e
     da4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);


  if(val != 0xAA)
     da6:	8c a5       	ldd	r24, Y+44	; 0x2c
     da8:	8a 3a       	cpi	r24, 0xAA	; 170
     daa:	09 f4       	brne	.+2      	; 0xdae <store_init_password+0x110>
     dac:	fa c0       	rjmp	.+500    	; 0xfa2 <store_init_password+0x304>
	{
		EEPROM_writeByte(0x0000, 0xAA);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	6a ea       	ldi	r22, 0xAA	; 170
     db4:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <EEPROM_writeByte>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e2       	ldi	r26, 0x20	; 32
     dbe:	b1 e4       	ldi	r27, 0x41	; 65
     dc0:	89 8f       	std	Y+25, r24	; 0x19
     dc2:	9a 8f       	std	Y+26, r25	; 0x1a
     dc4:	ab 8f       	std	Y+27, r26	; 0x1b
     dc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	69 8d       	ldd	r22, Y+25	; 0x19
     dca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a e7       	ldi	r20, 0x7A	; 122
     dd6:	53 e4       	ldi	r21, 0x43	; 67
     dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8d 8b       	std	Y+21, r24	; 0x15
     de2:	9e 8b       	std	Y+22, r25	; 0x16
     de4:	af 8b       	std	Y+23, r26	; 0x17
     de6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     de8:	6d 89       	ldd	r22, Y+21	; 0x15
     dea:	7e 89       	ldd	r23, Y+22	; 0x16
     dec:	8f 89       	ldd	r24, Y+23	; 0x17
     dee:	98 8d       	ldd	r25, Y+24	; 0x18
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	2c f4       	brge	.+10     	; 0xe0a <store_init_password+0x16c>
		__ticks = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9c 8b       	std	Y+20, r25	; 0x14
     e06:	8b 8b       	std	Y+19, r24	; 0x13
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <store_init_password+0x1ea>
	else if (__tmp > 65535)
     e0a:	6d 89       	ldd	r22, Y+21	; 0x15
     e0c:	7e 89       	ldd	r23, Y+22	; 0x16
     e0e:	8f 89       	ldd	r24, Y+23	; 0x17
     e10:	98 8d       	ldd	r25, Y+24	; 0x18
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	4f e7       	ldi	r20, 0x7F	; 127
     e18:	57 e4       	ldi	r21, 0x47	; 71
     e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e1e:	18 16       	cp	r1, r24
     e20:	4c f5       	brge	.+82     	; 0xe74 <store_init_password+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e22:	69 8d       	ldd	r22, Y+25	; 0x19
     e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <store_init_password+0x1cc>
     e4c:	89 e1       	ldi	r24, 0x19	; 25
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9a 8b       	std	Y+18, r25	; 0x12
     e52:	89 8b       	std	Y+17, r24	; 0x11
     e54:	89 89       	ldd	r24, Y+17	; 0x11
     e56:	9a 89       	ldd	r25, Y+18	; 0x12
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <store_init_password+0x1ba>
     e5c:	9a 8b       	std	Y+18, r25	; 0x12
     e5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	9c 89       	ldd	r25, Y+20	; 0x14
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	9c 8b       	std	Y+20, r25	; 0x14
     e68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	8b 89       	ldd	r24, Y+19	; 0x13
     e6c:	9c 89       	ldd	r25, Y+20	; 0x14
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	69 f7       	brne	.-38     	; 0xe4c <store_init_password+0x1ae>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <store_init_password+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	6d 89       	ldd	r22, Y+21	; 0x15
     e76:	7e 89       	ldd	r23, Y+22	; 0x16
     e78:	8f 89       	ldd	r24, Y+23	; 0x17
     e7a:	98 8d       	ldd	r25, Y+24	; 0x18
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9c 8b       	std	Y+20, r25	; 0x14
     e86:	8b 8b       	std	Y+19, r24	; 0x13
     e88:	8b 89       	ldd	r24, Y+19	; 0x13
     e8a:	9c 89       	ldd	r25, Y+20	; 0x14
     e8c:	98 8b       	std	Y+16, r25	; 0x10
     e8e:	8f 87       	std	Y+15, r24	; 0x0f
     e90:	8f 85       	ldd	r24, Y+15	; 0x0f
     e92:	98 89       	ldd	r25, Y+16	; 0x10
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <store_init_password+0x1f6>
     e98:	98 8b       	std	Y+16, r25	; 0x10
     e9a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

		for(i=0 ; i< SIZE_OF_PASSWARD ; i++)
     e9c:	1b a6       	std	Y+43, r1	; 0x2b
     e9e:	7d c0       	rjmp	.+250    	; 0xf9a <store_init_password+0x2fc>
		{
			EEPROM_writeByte((BASE_ADDRESS + i),  INIT_PASSWARD);
     ea0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	8f 5e       	subi	r24, 0xEF	; 239
     ea8:	9c 4f       	sbci	r25, 0xFC	; 252
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <EEPROM_writeByte>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e2       	ldi	r26, 0x20	; 32
     eb6:	b1 e4       	ldi	r27, 0x41	; 65
     eb8:	8b 87       	std	Y+11, r24	; 0x0b
     eba:	9c 87       	std	Y+12, r25	; 0x0c
     ebc:	ad 87       	std	Y+13, r26	; 0x0d
     ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	53 e4       	ldi	r21, 0x43	; 67
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8f 83       	std	Y+7, r24	; 0x07
     eda:	98 87       	std	Y+8, r25	; 0x08
     edc:	a9 87       	std	Y+9, r26	; 0x09
     ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	2c f4       	brge	.+10     	; 0xf02 <store_init_password+0x264>
		__ticks = 1;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <store_init_password+0x2e2>
	else if (__tmp > 65535)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f16:	18 16       	cp	r1, r24
     f18:	4c f5       	brge	.+82     	; 0xf6c <store_init_password+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	0f c0       	rjmp	.+30     	; 0xf62 <store_init_password+0x2c4>
     f44:	89 e1       	ldi	r24, 0x19	; 25
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <store_init_password+0x2b2>
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	69 f7       	brne	.-38     	; 0xf44 <store_init_password+0x2a6>
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <store_init_password+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <store_init_password+0x2ee>
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
  if(val != 0xAA)
	{
		EEPROM_writeByte(0x0000, 0xAA);
		_delay_ms(10);

		for(i=0 ; i< SIZE_OF_PASSWARD ; i++)
     f94:	8b a5       	ldd	r24, Y+43	; 0x2b
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	8b a7       	std	Y+43, r24	; 0x2b
     f9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9c:	85 30       	cpi	r24, 0x05	; 5
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <store_init_password+0x304>
     fa0:	7f cf       	rjmp	.-258    	; 0xea0 <store_init_password+0x202>

		}

	}

}
     fa2:	ac 96       	adiw	r28, 0x2c	; 44
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <Copy_correct_password>:
static void Copy_correct_password(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	60 97       	sbiw	r28, 0x10	; 16
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
	unint8 i , val;

		for(i=0 ; i< SIZE_OF_PASSWARD ; i++)
     fc8:	1f 86       	std	Y+15, r1	; 0x0f
     fca:	88 c0       	rjmp	.+272    	; 0x10dc <Copy_correct_password+0x128>
		{
			EEPROM_readByte((BASE_ADDRESS + i), &val);
     fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	8f 5e       	subi	r24, 0xEF	; 239
     fd4:	9c 4f       	sbci	r25, 0xFC	; 252
     fd6:	9e 01       	movw	r18, r28
     fd8:	20 5f       	subi	r18, 0xF0	; 240
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	b9 01       	movw	r22, r18
     fde:	0e 94 aa 0a 	call	0x1554	; 0x1554 <EEPROM_readByte>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 e2       	ldi	r26, 0x20	; 32
     fe8:	b1 e4       	ldi	r27, 0x41	; 65
     fea:	8b 87       	std	Y+11, r24	; 0x0b
     fec:	9c 87       	std	Y+12, r25	; 0x0c
     fee:	ad 87       	std	Y+13, r26	; 0x0d
     ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a e7       	ldi	r20, 0x7A	; 122
    1000:	53 e4       	ldi	r21, 0x43	; 67
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	a9 87       	std	Y+9, r26	; 0x09
    1010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <Copy_correct_password+0x80>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <Copy_correct_password+0xfe>
	else if (__tmp > 65535)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <Copy_correct_password+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <Copy_correct_password+0xe0>
    1076:	89 e1       	ldi	r24, 0x19	; 25
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <Copy_correct_password+0xce>
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <Copy_correct_password+0xc2>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <Copy_correct_password+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <Copy_correct_password+0x10a>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			Correct_Password_buffer[i]=val;
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	28 89       	ldd	r18, Y+16	; 0x10
    10ce:	fc 01       	movw	r30, r24
    10d0:	e5 5e       	subi	r30, 0xE5	; 229
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	20 83       	st	Z, r18
}
static void Copy_correct_password(void)
{
	unint8 i , val;

		for(i=0 ; i< SIZE_OF_PASSWARD ; i++)
    10d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	8f 87       	std	Y+15, r24	; 0x0f
    10dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10de:	85 30       	cpi	r24, 0x05	; 5
    10e0:	08 f4       	brcc	.+2      	; 0x10e4 <Copy_correct_password+0x130>
    10e2:	74 cf       	rjmp	.-280    	; 0xfcc <Copy_correct_password+0x18>
			EEPROM_readByte((BASE_ADDRESS + i), &val);
			_delay_ms(10);
			Correct_Password_buffer[i]=val;

		}
}
    10e4:	60 96       	adiw	r28, 0x10	; 16
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <door_lock_init>:

/*******************************global functions implementation**********************************/

void door_lock_init(void)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	EEPROM_init();
    10fe:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <EEPROM_init>
	keypad_init();
    1102:	0e 94 0a 0b 	call	0x1614	; 0x1614 <keypad_init>
	 LCD_init();
    1106:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_init>
    SET_BIT(DDRB , PB4);
    110a:	a7 e3       	ldi	r26, 0x37	; 55
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e7 e3       	ldi	r30, 0x37	; 55
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 61       	ori	r24, 0x10	; 16
    1116:	8c 93       	st	X, r24
    SET_BIT(DDRB , PB5);
    1118:	a7 e3       	ldi	r26, 0x37	; 55
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e7 e3       	ldi	r30, 0x37	; 55
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 62       	ori	r24, 0x20	; 32
    1124:	8c 93       	st	X, r24
    CLEAR_BIT(DDRC , PC2);
    1126:	a4 e3       	ldi	r26, 0x34	; 52
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8b 7f       	andi	r24, 0xFB	; 251
    1132:	8c 93       	st	X, r24
    CLEAR_BIT(DDRC , PC3);
    1134:	a4 e3       	ldi	r26, 0x34	; 52
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e4 e3       	ldi	r30, 0x34	; 52
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	8c 93       	st	X, r24
    SET_BIT(PORTC , PC2);
    1142:	a5 e3       	ldi	r26, 0x35	; 53
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e3       	ldi	r30, 0x35	; 53
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	84 60       	ori	r24, 0x04	; 4
    114e:	8c 93       	st	X, r24
    SET_BIT(PORTC , PC3);
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 60       	ori	r24, 0x08	; 8
    115c:	8c 93       	st	X, r24
    store_init_password();
    115e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <store_init_password>
    Copy_correct_password();
    1162:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Copy_correct_password>
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <scan_password>:

void scan_password(void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <scan_password+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	unint8 digit , i;

	for(i=0 ; i<SIZE_OF_PASSWARD ;i++)
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	15 c0       	rjmp	.+42     	; 0x11a4 <scan_password+0x38>
	{
		digit=key_pressed();
    117a:	0e 94 19 0b 	call	0x1632	; 0x1632 <key_pressed>
    117e:	8a 83       	std	Y+2, r24	; 0x02
	    LCD_displayStringOnRowColum(1 , i , "*");
    1180:	20 e6       	ldi	r18, 0x60	; 96
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	69 81       	ldd	r22, Y+1	; 0x01
    1188:	a9 01       	movw	r20, r18
    118a:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
	    Password_buffer[i]=digit;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	fc 01       	movw	r30, r24
    1196:	ea 5e       	subi	r30, 0xEA	; 234
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24

void scan_password(void)
{
	unint8 digit , i;

	for(i=0 ; i<SIZE_OF_PASSWARD ;i++)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	8f 5f       	subi	r24, 0xFF	; 255
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	85 30       	cpi	r24, 0x05	; 5
    11a8:	40 f3       	brcs	.-48     	; 0x117a <scan_password+0xe>
		digit=key_pressed();
	    LCD_displayStringOnRowColum(1 , i , "*");
	    Password_buffer[i]=digit;

	}
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <check_password>:

unint8 check_password(void)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <check_password+0x6>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	unint8 i;
	for(i=0 ; i<SIZE_OF_PASSWARD ;i++)
    11be:	19 82       	std	Y+1, r1	; 0x01
    11c0:	15 c0       	rjmp	.+42     	; 0x11ec <check_password+0x38>
		{
		   if( Password_buffer[i] !=Correct_Password_buffer[i])  return 0;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	fc 01       	movw	r30, r24
    11ca:	ea 5e       	subi	r30, 0xEA	; 234
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	20 81       	ld	r18, Z
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	e5 5e       	subi	r30, 0xE5	; 229
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	80 81       	ld	r24, Z
    11de:	28 17       	cp	r18, r24
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <check_password+0x32>
    11e2:	1a 82       	std	Y+2, r1	; 0x02
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <check_password+0x42>
}

unint8 check_password(void)
{
	unint8 i;
	for(i=0 ; i<SIZE_OF_PASSWARD ;i++)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	85 30       	cpi	r24, 0x05	; 5
    11f0:	40 f3       	brcs	.-48     	; 0x11c2 <check_password+0xe>
		{
		   if( Password_buffer[i] !=Correct_Password_buffer[i])  return 0;

		}

	return 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	8a 83       	std	Y+2, r24	; 0x02
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <check_mode>:

unint8 check_mode(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	unint8 return_val;
	return_val = key_pressed();
    120c:	0e 94 19 0b 	call	0x1632	; 0x1632 <key_pressed>
    1210:	89 83       	std	Y+1, r24	; 0x01
	return return_val;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <open_the_door>:

void open_the_door(void)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
	LCD_clear_screen();
    1224:	0e 94 19 14 	call	0x2832	; 0x2832 <LCD_clear_screen>
    LCD_displayStringOnRowColum(0 , 0 , "DOOR IS OPENED");
    1228:	22 e6       	ldi	r18, 0x62	; 98
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
    SET_BIT(PORTB , PB4);
    1236:	a8 e3       	ldi	r26, 0x38	; 56
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e8 e3       	ldi	r30, 0x38	; 56
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 61       	ori	r24, 0x10	; 16
    1242:	8c 93       	st	X, r24
    CLEAR_BIT(PORTB , PB5);
    1244:	a8 e3       	ldi	r26, 0x38	; 56
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e3       	ldi	r30, 0x38	; 56
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7d       	andi	r24, 0xDF	; 223
    1250:	8c 93       	st	X, r24

}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <scan_new_password>:

void scan_new_password(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	60 97       	sbiw	r28, 0x10	; 16
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
	unint8 digit , i;
	LCD_displayStringOnRowColum(1 , 0 , "                                   ");
    126c:	21 e7       	ldi	r18, 0x71	; 113
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>

	for(i=0 ; i<SIZE_OF_PASSWARD ;i++)
    127a:	1f 86       	std	Y+15, r1	; 0x0f
    127c:	97 c0       	rjmp	.+302    	; 0x13ac <scan_new_password+0x154>
	{
		digit=key_pressed();
    127e:	0e 94 19 0b 	call	0x1632	; 0x1632 <key_pressed>
    1282:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayStringOnRowColum(1 , i , "*");
    1284:	20 e6       	ldi	r18, 0x60	; 96
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	6f 85       	ldd	r22, Y+15	; 0x0f
    128c:	a9 01       	movw	r20, r18
    128e:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
		Password_buffer[i]=digit;
    1292:	8f 85       	ldd	r24, Y+15	; 0x0f
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	fc 01       	movw	r30, r24
    129a:	ea 5e       	subi	r30, 0xEA	; 234
    129c:	fe 4f       	sbci	r31, 0xFE	; 254
    129e:	88 89       	ldd	r24, Y+16	; 0x10
    12a0:	80 83       	st	Z, r24
	    EEPROM_writeByte((BASE_ADDRESS + i), digit);
    12a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	8f 5e       	subi	r24, 0xEF	; 239
    12aa:	9c 4f       	sbci	r25, 0xFC	; 252
    12ac:	68 89       	ldd	r22, Y+16	; 0x10
    12ae:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <EEPROM_writeByte>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 e2       	ldi	r26, 0x20	; 32
    12b8:	b1 e4       	ldi	r27, 0x41	; 65
    12ba:	8b 87       	std	Y+11, r24	; 0x0b
    12bc:	9c 87       	std	Y+12, r25	; 0x0c
    12be:	ad 87       	std	Y+13, r26	; 0x0d
    12c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a e7       	ldi	r20, 0x7A	; 122
    12d0:	53 e4       	ldi	r21, 0x43	; 67
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	8f 83       	std	Y+7, r24	; 0x07
    12dc:	98 87       	std	Y+8, r25	; 0x08
    12de:	a9 87       	std	Y+9, r26	; 0x09
    12e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <scan_new_password+0xac>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <scan_new_password+0x12a>
	else if (__tmp > 65535)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <scan_new_password+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <scan_new_password+0x10c>
    1346:	89 e1       	ldi	r24, 0x19	; 25
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <scan_new_password+0xfa>
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	69 f7       	brne	.-38     	; 0x1346 <scan_new_password+0xee>
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <scan_new_password+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <scan_new_password+0x136>
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Correct_Password_buffer[i]=digit;
    1396:	8f 85       	ldd	r24, Y+15	; 0x0f
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	e5 5e       	subi	r30, 0xE5	; 229
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	88 89       	ldd	r24, Y+16	; 0x10
    13a4:	80 83       	st	Z, r24
void scan_new_password(void)
{
	unint8 digit , i;
	LCD_displayStringOnRowColum(1 , 0 , "                                   ");

	for(i=0 ; i<SIZE_OF_PASSWARD ;i++)
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	85 30       	cpi	r24, 0x05	; 5
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <scan_new_password+0x15c>
    13b2:	65 cf       	rjmp	.-310    	; 0x127e <scan_new_password+0x26>
		Password_buffer[i]=digit;
	    EEPROM_writeByte((BASE_ADDRESS + i), digit);
		_delay_ms(10);
		Correct_Password_buffer[i]=digit;
	}
}
    13b4:	60 96       	adiw	r28, 0x10	; 16
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TWI_init>:


#include "I2C.h"

void TWI_init(void)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    13ce:	e0 e2       	ldi	r30, 0x20	; 32
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	80 83       	st	Z, r24
	TWSR = 0x00;
    13d6:	e1 e2       	ldi	r30, 0x21	; 33
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    13dc:	e2 e2       	ldi	r30, 0x22	; 34
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    13e4:	e6 e5       	ldi	r30, 0x56	; 86
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	80 83       	st	Z, r24
}
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <TWI_start>:

void TWI_start(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    13fa:	e6 e5       	ldi	r30, 0x56	; 86
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	84 ea       	ldi	r24, 0xA4	; 164
    1400:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(!READ_BIT(TWCR,TWINT));
    1402:	e6 e5       	ldi	r30, 0x56	; 86
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 23       	and	r24, r24
    140a:	dc f7       	brge	.-10     	; 0x1402 <TWI_start+0x10>
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <TWI_stop>:

void TWI_stop(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    141a:	e6 e5       	ldi	r30, 0x56	; 86
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	84 e9       	ldi	r24, 0x94	; 148
    1420:	80 83       	st	Z, r24
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <TWI_write>:

void TWI_write(unint8 data)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1434:	e3 e2       	ldi	r30, 0x23	; 35
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    143c:	e6 e5       	ldi	r30, 0x56	; 86
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	84 e8       	ldi	r24, 0x84	; 132
    1442:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!READ_BIT(TWCR,TWINT));
    1444:	e6 e5       	ldi	r30, 0x56	; 86
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	dc f7       	brge	.-10     	; 0x1444 <TWI_write+0x1c>
}
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <TWI_readWithACK>:

unint8 TWI_readWithACK(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    145e:	e6 e5       	ldi	r30, 0x56	; 86
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	84 ec       	ldi	r24, 0xC4	; 196
    1464:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!READ_BIT(TWCR,TWINT));
    1466:	e6 e5       	ldi	r30, 0x56	; 86
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	88 23       	and	r24, r24
    146e:	dc f7       	brge	.-10     	; 0x1466 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1470:	e3 e2       	ldi	r30, 0x23	; 35
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <TWI_readWithNACK>:

unint8 TWI_readWithNACK(void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1484:	e6 e5       	ldi	r30, 0x56	; 86
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	84 e8       	ldi	r24, 0x84	; 132
    148a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!READ_BIT(TWCR,TWINT));
    148c:	e6 e5       	ldi	r30, 0x56	; 86
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	88 23       	and	r24, r24
    1494:	dc f7       	brge	.-10     	; 0x148c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1496:	e3 e2       	ldi	r30, 0x23	; 35
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <TWI_getStatus>:

unint8 TWI_getStatus(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	0f 92       	push	r0
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    unint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    14ac:	e1 e2       	ldi	r30, 0x21	; 33
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	88 7f       	andi	r24, 0xF8	; 248
    14b4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <EEPROM_init>:

#include "i2c.h"
#include "eeprom.h"

void EEPROM_init(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    14c8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_init>
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <EEPROM_writeByte>:

unint8 EEPROM_writeByte(unint16 u16addr, unint8 u8data)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <EEPROM_writeByte+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <EEPROM_writeByte+0x8>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14e4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    14e8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <EEPROM_writeByte+0x22>
        return ERROR;
    14f0:	1c 82       	std	Y+4, r1	; 0x04
    14f2:	28 c0       	rjmp	.+80     	; 0x1544 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((unint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	80 70       	andi	r24, 0x00	; 0
    14fa:	97 70       	andi	r25, 0x07	; 7
    14fc:	88 0f       	add	r24, r24
    14fe:	89 2f       	mov	r24, r25
    1500:	88 1f       	adc	r24, r24
    1502:	99 0b       	sbc	r25, r25
    1504:	91 95       	neg	r25
    1506:	80 6a       	ori	r24, 0xA0	; 160
    1508:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    150c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    1510:	88 31       	cpi	r24, 0x18	; 24
    1512:	11 f0       	breq	.+4      	; 0x1518 <EEPROM_writeByte+0x46>
        return ERROR;
    1514:	1c 82       	std	Y+4, r1	; 0x04
    1516:	16 c0       	rjmp	.+44     	; 0x1544 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((unint8)(u16addr));
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    151e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    1522:	88 32       	cpi	r24, 0x28	; 40
    1524:	11 f0       	breq	.+4      	; 0x152a <EEPROM_writeByte+0x58>
        return ERROR;
    1526:	1c 82       	std	Y+4, r1	; 0x04
    1528:	0d c0       	rjmp	.+26     	; 0x1544 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1530:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    1534:	88 32       	cpi	r24, 0x28	; 40
    1536:	11 f0       	breq	.+4      	; 0x153c <EEPROM_writeByte+0x6a>
        return ERROR;
    1538:	1c 82       	std	Y+4, r1	; 0x04
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    153c:	0e 94 09 0a 	call	0x1412	; 0x1412 <TWI_stop>

    return SUCCESS;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	8c 83       	std	Y+4, r24	; 0x04
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <EEPROM_readByte>:

unint8 EEPROM_readByte(unint16 u16addr, unint8 *u8data)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <EEPROM_readByte+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <EEPROM_readByte+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	7c 83       	std	Y+4, r23	; 0x04
    1568:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    156a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    156e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    1572:	88 30       	cpi	r24, 0x08	; 8
    1574:	11 f0       	breq	.+4      	; 0x157a <EEPROM_readByte+0x26>
        return ERROR;
    1576:	1d 82       	std	Y+5, r1	; 0x05
    1578:	44 c0       	rjmp	.+136    	; 0x1602 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((unint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	80 70       	andi	r24, 0x00	; 0
    1580:	97 70       	andi	r25, 0x07	; 7
    1582:	88 0f       	add	r24, r24
    1584:	89 2f       	mov	r24, r25
    1586:	88 1f       	adc	r24, r24
    1588:	99 0b       	sbc	r25, r25
    158a:	91 95       	neg	r25
    158c:	80 6a       	ori	r24, 0xA0	; 160
    158e:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1592:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    1596:	88 31       	cpi	r24, 0x18	; 24
    1598:	11 f0       	breq	.+4      	; 0x159e <EEPROM_readByte+0x4a>
        return ERROR;
    159a:	1d 82       	std	Y+5, r1	; 0x05
    159c:	32 c0       	rjmp	.+100    	; 0x1602 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((unint8)(u16addr));
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    15a4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    15a8:	88 32       	cpi	r24, 0x28	; 40
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <EEPROM_readByte+0x5c>
        return ERROR;
    15ac:	1d 82       	std	Y+5, r1	; 0x05
    15ae:	29 c0       	rjmp	.+82     	; 0x1602 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    15b0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    15b4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    15b8:	80 31       	cpi	r24, 0x10	; 16
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <EEPROM_readByte+0x6c>
        return ERROR;
    15bc:	1d 82       	std	Y+5, r1	; 0x05
    15be:	21 c0       	rjmp	.+66     	; 0x1602 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((unint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	80 70       	andi	r24, 0x00	; 0
    15c6:	97 70       	andi	r25, 0x07	; 7
    15c8:	88 0f       	add	r24, r24
    15ca:	89 2f       	mov	r24, r25
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 0b       	sbc	r25, r25
    15d0:	91 95       	neg	r25
    15d2:	81 6a       	ori	r24, 0xA1	; 161
    15d4:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    15d8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    15dc:	80 34       	cpi	r24, 0x40	; 64
    15de:	11 f0       	breq	.+4      	; 0x15e4 <EEPROM_readByte+0x90>
        return ERROR;
    15e0:	1d 82       	std	Y+5, r1	; 0x05
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    15e4:	0e 94 3e 0a 	call	0x147c	; 0x147c <TWI_readWithNACK>
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    15ee:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TWI_getStatus>
    15f2:	88 35       	cpi	r24, 0x58	; 88
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_readByte+0xa6>
        return ERROR;
    15f6:	1d 82       	std	Y+5, r1	; 0x05
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15fa:	0e 94 09 0a 	call	0x1412	; 0x1412 <TWI_stop>
    return SUCCESS;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <keypad_init>:
	                                             {1 , 2 , 3 , '-' },
	                                             {'c', 0 ,'=','+' },
                                               };

void keypad_init(void)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
	KEY_DDR = 0x0f;
    161c:	e1 e3       	ldi	r30, 0x31	; 49
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8f e0       	ldi	r24, 0x0F	; 15
    1622:	80 83       	st	Z, r24

    KEY_PORT = 0xff;
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	80 83       	st	Z, r24
}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <key_pressed>:

unint8 key_pressed()
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	60 97       	sbiw	r28, 0x10	; 16
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
	unint8 i , j ;

while(1)
{
		for(i=0 ; i < ROW_NUM ; i++)
    1646:	18 8a       	std	Y+16, r1	; 0x10
    1648:	e4 c0       	rjmp	.+456    	; 0x1812 <key_pressed+0x1e0>
		{
			KEY_PORT &=~(1u << i);
    164a:	a2 e3       	ldi	r26, 0x32	; 50
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e2 e3       	ldi	r30, 0x32	; 50
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	40 81       	ld	r20, Z
    1654:	88 89       	ldd	r24, Y+16	; 0x10
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <key_pressed+0x32>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	2a 95       	dec	r18
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <key_pressed+0x2e>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e8       	ldi	r26, 0x80	; 128
    1674:	bf e3       	ldi	r27, 0x3F	; 63
    1676:	8b 87       	std	Y+11, r24	; 0x0b
    1678:	9c 87       	std	Y+12, r25	; 0x0c
    167a:	ad 87       	std	Y+13, r26	; 0x0d
    167c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e7       	ldi	r20, 0x7A	; 122
    168c:	53 e4       	ldi	r21, 0x43	; 67
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8f 83       	std	Y+7, r24	; 0x07
    1698:	98 87       	std	Y+8, r25	; 0x08
    169a:	a9 87       	std	Y+9, r26	; 0x09
    169c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <key_pressed+0x8e>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	3f c0       	rjmp	.+126    	; 0x173e <key_pressed+0x10c>
	else if (__tmp > 65535)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <key_pressed+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16da:	7c 85       	ldd	r23, Y+12	; 0x0c
    16dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16de:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <key_pressed+0xee>
    1702:	89 e1       	ldi	r24, 0x19	; 25
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <key_pressed+0xdc>
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <key_pressed+0xd0>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <key_pressed+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <key_pressed+0x118>
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(1);
			for(j=0 ; j < COLUM_NUM  ; j++)
    1752:	1f 86       	std	Y+15, r1	; 0x0f
    1754:	45 c0       	rjmp	.+138    	; 0x17e0 <key_pressed+0x1ae>
			{
				if(!READ_BIT(KEY_PIN , j+4))
    1756:	e0 e3       	ldi	r30, 0x30	; 48
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8f 85       	ldd	r24, Y+15	; 0x0f
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	04 96       	adiw	r24, 0x04	; 4
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <key_pressed+0x13e>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <key_pressed+0x13a>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	90 70       	andi	r25, 0x00	; 0
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	71 f5       	brne	.+92     	; 0x17da <key_pressed+0x1a8>
				{
					while(!READ_BIT(KEY_PIN , j+4));
    177e:	e0 e3       	ldi	r30, 0x30	; 48
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8f 85       	ldd	r24, Y+15	; 0x0f
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	04 96       	adiw	r24, 0x04	; 4
    1790:	a9 01       	movw	r20, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <key_pressed+0x166>
    1794:	55 95       	asr	r21
    1796:	47 95       	ror	r20
    1798:	8a 95       	dec	r24
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <key_pressed+0x162>
    179c:	ca 01       	movw	r24, r20
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	90 70       	andi	r25, 0x00	; 0
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f3       	breq	.-40     	; 0x177e <key_pressed+0x14c>

					return keypad[i][j];
    17a6:	88 89       	ldd	r24, Y+16	; 0x10
    17a8:	48 2f       	mov	r20, r24
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	ca 01       	movw	r24, r20
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	82 0f       	add	r24, r18
    17be:	93 1f       	adc	r25, r19
    17c0:	fc 01       	movw	r30, r24
    17c2:	ea 5f       	subi	r30, 0xFA	; 250
    17c4:	fe 4f       	sbci	r31, 0xFE	; 254
    17c6:	80 81       	ld	r24, Z
			}

			KEY_PORT |=(1u << i);

		}
	}}
    17c8:	60 96       	adiw	r28, 0x10	; 16
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret
{
		for(i=0 ; i < ROW_NUM ; i++)
		{
			KEY_PORT &=~(1u << i);
            _delay_ms(1);
			for(j=0 ; j < COLUM_NUM  ; j++)
    17da:	8f 85       	ldd	r24, Y+15	; 0x0f
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	8f 87       	std	Y+15, r24	; 0x0f
    17e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <key_pressed+0x1b6>
    17e6:	b7 cf       	rjmp	.-146    	; 0x1756 <key_pressed+0x124>

					return keypad[i][j];
				}
			}

			KEY_PORT |=(1u << i);
    17e8:	a2 e3       	ldi	r26, 0x32	; 50
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e2 e3       	ldi	r30, 0x32	; 50
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	40 81       	ld	r20, Z
    17f2:	88 89       	ldd	r24, Y+16	; 0x10
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <key_pressed+0x1d2>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <key_pressed+0x1ce>
    1808:	84 2b       	or	r24, r20
    180a:	8c 93       	st	X, r24
{
	unint8 i , j ;

while(1)
{
		for(i=0 ; i < ROW_NUM ; i++)
    180c:	88 89       	ldd	r24, Y+16	; 0x10
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	88 8b       	std	Y+16, r24	; 0x10
    1812:	88 89       	ldd	r24, Y+16	; 0x10
    1814:	84 30       	cpi	r24, 0x04	; 4
    1816:	08 f4       	brcc	.+2      	; 0x181a <key_pressed+0x1e8>
    1818:	18 cf       	rjmp	.-464    	; 0x164a <key_pressed+0x18>
    181a:	15 cf       	rjmp	.-470    	; 0x1646 <key_pressed+0x14>

0000181c <LCD_init>:

#include "lcd.h"
#include <util/delay.h>

void LCD_init(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62

	LCD_CTRL_PORT_DIR |=((1 << E) | (1 << RS) | (1 << RW) );
    1824:	a7 e3       	ldi	r26, 0x37	; 55
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e7 e3       	ldi	r30, 0x37	; 55
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	87 60       	ori	r24, 0x07	; 7
    1830:	8c 93       	st	X, r24

		LCD_sendCommand(TWO_LINE_LCD_4BITS_MODE);

#elif (DATA_BITS_MODE == 8)

		LCD_DIR_PORT = 0XFF;
    1832:	ea e3       	ldi	r30, 0x3A	; 58
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	80 83       	st	Z, r24

		LCD_sendCommand(TWO_LINE_LCD_8BITS_MODE);
    183a:	88 e3       	ldi	r24, 0x38	; 56
    183c:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>

#endif

		LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1840:	8c e0       	ldi	r24, 0x0C	; 12
    1842:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>
		LCD_sendCommand(CLEAR_COMMAND);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>

}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_sendCommand>:

void LCD_sendCommand(unint8 commond)
{
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	c1 56       	subi	r28, 0x61	; 97
    1860:	d0 40       	sbci	r29, 0x00	; 0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	fe 01       	movw	r30, r28
    186e:	ef 59       	subi	r30, 0x9F	; 159
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT , RS );
    1874:	a8 e3       	ldi	r26, 0x38	; 56
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e8 e3       	ldi	r30, 0x38	; 56
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8e 7f       	andi	r24, 0xFE	; 254
    1880:	8c 93       	st	X, r24

	CLEAR_BIT(LCD_CTRL_PORT , RW);
    1882:	a8 e3       	ldi	r26, 0x38	; 56
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e8 e3       	ldi	r30, 0x38	; 56
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8d 7f       	andi	r24, 0xFD	; 253
    188e:	8c 93       	st	X, r24
    1890:	fe 01       	movw	r30, r28
    1892:	e3 5a       	subi	r30, 0xA3	; 163
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e8       	ldi	r26, 0x80	; 128
    189c:	bf e3       	ldi	r27, 0x3F	; 63
    189e:	80 83       	st	Z, r24
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	a2 83       	std	Z+2, r26	; 0x02
    18a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18a6:	8e 01       	movw	r16, r28
    18a8:	07 5a       	subi	r16, 0xA7	; 167
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	fe 01       	movw	r30, r28
    18ae:	e3 5a       	subi	r30, 0xA3	; 163
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	2b ea       	ldi	r18, 0xAB	; 171
    18bc:	3a ea       	ldi	r19, 0xAA	; 170
    18be:	4a ea       	ldi	r20, 0xAA	; 170
    18c0:	5e e3       	ldi	r21, 0x3E	; 62
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	f8 01       	movw	r30, r16
    18cc:	80 83       	st	Z, r24
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	a2 83       	std	Z+2, r26	; 0x02
    18d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5a       	subi	r30, 0xA7	; 167
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ee:	88 23       	and	r24, r24
    18f0:	34 f4       	brge	.+12     	; 0x18fe <LCD_sendCommand+0xac>
		__ticks = 1;
    18f2:	fe 01       	movw	r30, r28
    18f4:	e8 5a       	subi	r30, 0xA8	; 168
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	80 83       	st	Z, r24
    18fc:	e0 c0       	rjmp	.+448    	; 0x1abe <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    18fe:	fe 01       	movw	r30, r28
    1900:	e7 5a       	subi	r30, 0xA7	; 167
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4f e7       	ldi	r20, 0x7F	; 127
    1912:	53 e4       	ldi	r21, 0x43	; 67
    1914:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1918:	18 16       	cp	r1, r24
    191a:	0c f0       	brlt	.+2      	; 0x191e <LCD_sendCommand+0xcc>
    191c:	c0 c0       	rjmp	.+384    	; 0x1a9e <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    191e:	fe 01       	movw	r30, r28
    1920:	e3 5a       	subi	r30, 0xA3	; 163
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e7       	ldi	r20, 0x7A	; 122
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	fe 01       	movw	r30, r28
    193e:	ec 5a       	subi	r30, 0xAC	; 172
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	8e 01       	movw	r16, r28
    194c:	00 5b       	subi	r16, 0xB0	; 176
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	ec 5a       	subi	r30, 0xAC	; 172
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	53 e4       	ldi	r21, 0x43	; 67
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	f8 01       	movw	r30, r16
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1978:	fe 01       	movw	r30, r28
    197a:	e0 5b       	subi	r30, 0xB0	; 176
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	44 f4       	brge	.+16     	; 0x19a6 <LCD_sendCommand+0x154>
		__ticks = 1;
    1996:	fe 01       	movw	r30, r28
    1998:	e2 5b       	subi	r30, 0xB2	; 178
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	64 c0       	rjmp	.+200    	; 0x1a6e <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    19a6:	fe 01       	movw	r30, r28
    19a8:	e0 5b       	subi	r30, 0xB0	; 176
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	0c f0       	brlt	.+2      	; 0x19c6 <LCD_sendCommand+0x174>
    19c4:	43 c0       	rjmp	.+134    	; 0x1a4c <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	fe 01       	movw	r30, r28
    19c8:	ec 5a       	subi	r30, 0xAC	; 172
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8e 01       	movw	r16, r28
    19e6:	02 5b       	subi	r16, 0xB2	; 178
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	1f c0       	rjmp	.+62     	; 0x1a3c <LCD_sendCommand+0x1ea>
    19fe:	fe 01       	movw	r30, r28
    1a00:	e4 5b       	subi	r30, 0xB4	; 180
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	89 e1       	ldi	r24, 0x19	; 25
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	80 83       	st	Z, r24
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e4 5b       	subi	r30, 0xB4	; 180
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_sendCommand+0x1c4>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e4 5b       	subi	r30, 0xB4	; 180
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	de 01       	movw	r26, r28
    1a26:	a2 5b       	subi	r26, 0xB2	; 178
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e2 5b       	subi	r30, 0xB2	; 178
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	11 96       	adiw	r26, 0x01	; 1
    1a38:	9c 93       	st	X, r25
    1a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e2 5b       	subi	r30, 0xB2	; 178
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	d1 f6       	brne	.-76     	; 0x19fe <LCD_sendCommand+0x1ac>
    1a4a:	4b c0       	rjmp	.+150    	; 0x1ae2 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	8e 01       	movw	r16, r28
    1a4e:	02 5b       	subi	r16, 0xB2	; 178
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	fe 01       	movw	r30, r28
    1a54:	e0 5b       	subi	r30, 0xB0	; 176
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	f8 01       	movw	r30, r16
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
    1a6e:	de 01       	movw	r26, r28
    1a70:	a6 5b       	subi	r26, 0xB6	; 182
    1a72:	bf 4f       	sbci	r27, 0xFF	; 255
    1a74:	fe 01       	movw	r30, r28
    1a76:	e2 5b       	subi	r30, 0xB2	; 178
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
    1a84:	fe 01       	movw	r30, r28
    1a86:	e6 5b       	subi	r30, 0xB6	; 182
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_sendCommand+0x23c>
    1a92:	fe 01       	movw	r30, r28
    1a94:	e6 5b       	subi	r30, 0xB6	; 182
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	22 c0       	rjmp	.+68     	; 0x1ae2 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	08 5a       	subi	r16, 0xA8	; 168
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 5a       	subi	r30, 0xA7	; 167
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	f8 01       	movw	r30, r16
    1abc:	80 83       	st	Z, r24
    1abe:	de 01       	movw	r26, r28
    1ac0:	a7 5b       	subi	r26, 0xB7	; 183
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e8 5a       	subi	r30, 0xA8	; 168
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e7 5b       	subi	r30, 0xB7	; 183
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8a 95       	dec	r24
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_sendCommand+0x284>
    1ada:	fe 01       	movw	r30, r28
    1adc:	e7 5b       	subi	r30, 0xB7	; 183
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 83       	st	Z, r24

	_delay_us(1);

	SET_BIT(LCD_CTRL_PORT , E);
    1ae2:	a8 e3       	ldi	r26, 0x38	; 56
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e8 e3       	ldi	r30, 0x38	; 56
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	84 60       	ori	r24, 0x04	; 4
    1aee:	8c 93       	st	X, r24
    1af0:	fe 01       	movw	r30, r28
    1af2:	eb 5b       	subi	r30, 0xBB	; 187
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e8       	ldi	r26, 0x80	; 128
    1afc:	bf e3       	ldi	r27, 0x3F	; 63
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b06:	8e 01       	movw	r16, r28
    1b08:	0f 5b       	subi	r16, 0xBF	; 191
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	eb 5b       	subi	r30, 0xBB	; 187
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	2b ea       	ldi	r18, 0xAB	; 171
    1b1c:	3a ea       	ldi	r19, 0xAA	; 170
    1b1e:	4a ea       	ldi	r20, 0xAA	; 170
    1b20:	5e e3       	ldi	r21, 0x3E	; 62
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 83       	st	Z, r24
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b34:	fe 01       	movw	r30, r28
    1b36:	ef 5b       	subi	r30, 0xBF	; 191
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	34 f4       	brge	.+12     	; 0x1b5e <LCD_sendCommand+0x30c>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	fe 01       	movw	r30, r28
    1b56:	e0 5c       	subi	r30, 0xC0	; 192
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 83       	st	Z, r24
    1b5c:	9d c0       	rjmp	.+314    	; 0x1c98 <LCD_sendCommand+0x446>
	else if (__tmp > 255)
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ef 5b       	subi	r30, 0xBF	; 191
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	53 e4       	ldi	r21, 0x43	; 67
    1b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	0c f0       	brlt	.+2      	; 0x1b7e <LCD_sendCommand+0x32c>
    1b7c:	7e c0       	rjmp	.+252    	; 0x1c7a <LCD_sendCommand+0x428>
	{
		_delay_ms(__us / 1000.0);
    1b7e:	fe 01       	movw	r30, r28
    1b80:	eb 5b       	subi	r30, 0xBB	; 187
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a e7       	ldi	r20, 0x7A	; 122
    1b92:	54 e4       	ldi	r21, 0x44	; 68
    1b94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8c af       	std	Y+60, r24	; 0x3c
    1b9e:	9d af       	std	Y+61, r25	; 0x3d
    1ba0:	ae af       	std	Y+62, r26	; 0x3e
    1ba2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ba6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ba8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1baa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a e7       	ldi	r20, 0x7A	; 122
    1bb2:	53 e4       	ldi	r21, 0x43	; 67
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	88 af       	std	Y+56, r24	; 0x38
    1bbe:	99 af       	std	Y+57, r25	; 0x39
    1bc0:	aa af       	std	Y+58, r26	; 0x3a
    1bc2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1bc4:	68 ad       	ldd	r22, Y+56	; 0x38
    1bc6:	79 ad       	ldd	r23, Y+57	; 0x39
    1bc8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bca:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <LCD_sendCommand+0x394>
		__ticks = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9f ab       	std	Y+55, r25	; 0x37
    1be2:	8e ab       	std	Y+54, r24	; 0x36
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <LCD_sendCommand+0x412>
	else if (__tmp > 65535)
    1be6:	68 ad       	ldd	r22, Y+56	; 0x38
    1be8:	79 ad       	ldd	r23, Y+57	; 0x39
    1bea:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bec:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	4c f5       	brge	.+82     	; 0x1c50 <LCD_sendCommand+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c00:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c02:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c04:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9f ab       	std	Y+55, r25	; 0x37
    1c24:	8e ab       	std	Y+54, r24	; 0x36
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LCD_sendCommand+0x3f4>
    1c28:	89 e1       	ldi	r24, 0x19	; 25
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9d ab       	std	Y+53, r25	; 0x35
    1c2e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c30:	8c a9       	ldd	r24, Y+52	; 0x34
    1c32:	9d a9       	ldd	r25, Y+53	; 0x35
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_sendCommand+0x3e2>
    1c38:	9d ab       	std	Y+53, r25	; 0x35
    1c3a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c3e:	9f a9       	ldd	r25, Y+55	; 0x37
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9f ab       	std	Y+55, r25	; 0x37
    1c44:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	8e a9       	ldd	r24, Y+54	; 0x36
    1c48:	9f a9       	ldd	r25, Y+55	; 0x37
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <LCD_sendCommand+0x3d6>
    1c4e:	2d c0       	rjmp	.+90     	; 0x1caa <LCD_sendCommand+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	68 ad       	ldd	r22, Y+56	; 0x38
    1c52:	79 ad       	ldd	r23, Y+57	; 0x39
    1c54:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c56:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9f ab       	std	Y+55, r25	; 0x37
    1c62:	8e ab       	std	Y+54, r24	; 0x36
    1c64:	8e a9       	ldd	r24, Y+54	; 0x36
    1c66:	9f a9       	ldd	r25, Y+55	; 0x37
    1c68:	9b ab       	std	Y+51, r25	; 0x33
    1c6a:	8a ab       	std	Y+50, r24	; 0x32
    1c6c:	8a a9       	ldd	r24, Y+50	; 0x32
    1c6e:	9b a9       	ldd	r25, Y+51	; 0x33
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_sendCommand+0x41e>
    1c74:	9b ab       	std	Y+51, r25	; 0x33
    1c76:	8a ab       	std	Y+50, r24	; 0x32
    1c78:	18 c0       	rjmp	.+48     	; 0x1caa <LCD_sendCommand+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ef 5b       	subi	r30, 0xBF	; 191
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	fe 01       	movw	r30, r28
    1c92:	e0 5c       	subi	r30, 0xC0	; 192
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 83       	st	Z, r24
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e0 5c       	subi	r30, 0xC0	; 192
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ca2:	89 a9       	ldd	r24, Y+49	; 0x31
    1ca4:	8a 95       	dec	r24
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_sendCommand+0x452>
    1ca8:	89 ab       	std	Y+49, r24	; 0x31



#elif(DATA_BITS_MODE == 8)

	LCD_DATA_PORT = commond;
    1caa:	ab e3       	ldi	r26, 0x3B	; 59
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ef 59       	subi	r30, 0x9F	; 159
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8c 93       	st	X, r24
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a0 e8       	ldi	r26, 0x80	; 128
    1cbe:	bf e3       	ldi	r27, 0x3F	; 63
    1cc0:	8d a7       	std	Y+45, r24	; 0x2d
    1cc2:	9e a7       	std	Y+46, r25	; 0x2e
    1cc4:	af a7       	std	Y+47, r26	; 0x2f
    1cc6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cc8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cca:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cce:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd0:	2b ea       	ldi	r18, 0xAB	; 171
    1cd2:	3a ea       	ldi	r19, 0xAA	; 170
    1cd4:	4a ea       	ldi	r20, 0xAA	; 170
    1cd6:	5e e3       	ldi	r21, 0x3E	; 62
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	89 a7       	std	Y+41, r24	; 0x29
    1ce2:	9a a7       	std	Y+42, r25	; 0x2a
    1ce4:	ab a7       	std	Y+43, r26	; 0x2b
    1ce6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ce8:	69 a5       	ldd	r22, Y+41	; 0x29
    1cea:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cec:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cee:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	1c f4       	brge	.+6      	; 0x1d06 <LCD_sendCommand+0x4b4>
		__ticks = 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	88 a7       	std	Y+40, r24	; 0x28
    1d04:	91 c0       	rjmp	.+290    	; 0x1e28 <LCD_sendCommand+0x5d6>
	else if (__tmp > 255)
    1d06:	69 a5       	ldd	r22, Y+41	; 0x29
    1d08:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	53 e4       	ldi	r21, 0x43	; 67
    1d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <LCD_sendCommand+0x4ce>
    1d1e:	7b c0       	rjmp	.+246    	; 0x1e16 <LCD_sendCommand+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    1d20:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d22:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d26:	98 a9       	ldd	r25, Y+48	; 0x30
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8c a3       	std	Y+36, r24	; 0x24
    1d3a:	9d a3       	std	Y+37, r25	; 0x25
    1d3c:	ae a3       	std	Y+38, r26	; 0x26
    1d3e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6c a1       	ldd	r22, Y+36	; 0x24
    1d42:	7d a1       	ldd	r23, Y+37	; 0x25
    1d44:	8e a1       	ldd	r24, Y+38	; 0x26
    1d46:	9f a1       	ldd	r25, Y+39	; 0x27
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a e7       	ldi	r20, 0x7A	; 122
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	88 a3       	std	Y+32, r24	; 0x20
    1d5a:	99 a3       	std	Y+33, r25	; 0x21
    1d5c:	aa a3       	std	Y+34, r26	; 0x22
    1d5e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d60:	68 a1       	ldd	r22, Y+32	; 0x20
    1d62:	79 a1       	ldd	r23, Y+33	; 0x21
    1d64:	8a a1       	ldd	r24, Y+34	; 0x22
    1d66:	9b a1       	ldd	r25, Y+35	; 0x23
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <LCD_sendCommand+0x530>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <LCD_sendCommand+0x5ae>
	else if (__tmp > 65535)
    1d82:	68 a1       	ldd	r22, Y+32	; 0x20
    1d84:	79 a1       	ldd	r23, Y+33	; 0x21
    1d86:	8a a1       	ldd	r24, Y+34	; 0x22
    1d88:	9b a1       	ldd	r25, Y+35	; 0x23
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <LCD_sendCommand+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	6c a1       	ldd	r22, Y+36	; 0x24
    1d9c:	7d a1       	ldd	r23, Y+37	; 0x25
    1d9e:	8e a1       	ldd	r24, Y+38	; 0x26
    1da0:	9f a1       	ldd	r25, Y+39	; 0x27
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9f 8f       	std	Y+31, r25	; 0x1f
    1dc0:	8e 8f       	std	Y+30, r24	; 0x1e
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <LCD_sendCommand+0x590>
    1dc4:	89 e1       	ldi	r24, 0x19	; 25
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9d 8f       	std	Y+29, r25	; 0x1d
    1dca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_sendCommand+0x57e>
    1dd4:	9d 8f       	std	Y+29, r25	; 0x1d
    1dd6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9f 8f       	std	Y+31, r25	; 0x1f
    1de0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1de4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <LCD_sendCommand+0x572>
    1dea:	24 c0       	rjmp	.+72     	; 0x1e34 <LCD_sendCommand+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	68 a1       	ldd	r22, Y+32	; 0x20
    1dee:	79 a1       	ldd	r23, Y+33	; 0x21
    1df0:	8a a1       	ldd	r24, Y+34	; 0x22
    1df2:	9b a1       	ldd	r25, Y+35	; 0x23
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9f 8f       	std	Y+31, r25	; 0x1f
    1dfe:	8e 8f       	std	Y+30, r24	; 0x1e
    1e00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e04:	9b 8f       	std	Y+27, r25	; 0x1b
    1e06:	8a 8f       	std	Y+26, r24	; 0x1a
    1e08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_sendCommand+0x5ba>
    1e10:	9b 8f       	std	Y+27, r25	; 0x1b
    1e12:	8a 8f       	std	Y+26, r24	; 0x1a
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_sendCommand+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e16:	69 a5       	ldd	r22, Y+41	; 0x29
    1e18:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	88 a7       	std	Y+40, r24	; 0x28
    1e28:	88 a5       	ldd	r24, Y+40	; 0x28
    1e2a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e2c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e2e:	8a 95       	dec	r24
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_sendCommand+0x5dc>
    1e32:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLEAR_BIT(LCD_CTRL_PORT , E);
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8b 7f       	andi	r24, 0xFB	; 251
    1e40:	8c 93       	st	X, r24
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
    1e4c:	9e 8b       	std	Y+22, r25	; 0x16
    1e4e:	af 8b       	std	Y+23, r26	; 0x17
    1e50:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	2b ea       	ldi	r18, 0xAB	; 171
    1e5c:	3a ea       	ldi	r19, 0xAA	; 170
    1e5e:	4a ea       	ldi	r20, 0xAA	; 170
    1e60:	5e e3       	ldi	r21, 0x3E	; 62
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	89 8b       	std	Y+17, r24	; 0x11
    1e6c:	9a 8b       	std	Y+18, r25	; 0x12
    1e6e:	ab 8b       	std	Y+19, r26	; 0x13
    1e70:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e72:	69 89       	ldd	r22, Y+17	; 0x11
    1e74:	7a 89       	ldd	r23, Y+18	; 0x12
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	1c f4       	brge	.+6      	; 0x1e90 <LCD_sendCommand+0x63e>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	88 8b       	std	Y+16, r24	; 0x10
    1e8e:	91 c0       	rjmp	.+290    	; 0x1fb2 <LCD_sendCommand+0x760>
	else if (__tmp > 255)
    1e90:	69 89       	ldd	r22, Y+17	; 0x11
    1e92:	7a 89       	ldd	r23, Y+18	; 0x12
    1e94:	8b 89       	ldd	r24, Y+19	; 0x13
    1e96:	9c 89       	ldd	r25, Y+20	; 0x14
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	53 e4       	ldi	r21, 0x43	; 67
    1ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	0c f0       	brlt	.+2      	; 0x1eaa <LCD_sendCommand+0x658>
    1ea8:	7b c0       	rjmp	.+246    	; 0x1fa0 <LCD_sendCommand+0x74e>
	{
		_delay_ms(__us / 1000.0);
    1eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1eac:	7e 89       	ldd	r23, Y+22	; 0x16
    1eae:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	54 e4       	ldi	r21, 0x44	; 68
    1eba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8c 87       	std	Y+12, r24	; 0x0c
    1ec4:	9d 87       	std	Y+13, r25	; 0x0d
    1ec6:	ae 87       	std	Y+14, r26	; 0x0e
    1ec8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ecc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ece:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a e7       	ldi	r20, 0x7A	; 122
    1ed8:	53 e4       	ldi	r21, 0x43	; 67
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	88 87       	std	Y+8, r24	; 0x08
    1ee4:	99 87       	std	Y+9, r25	; 0x09
    1ee6:	aa 87       	std	Y+10, r26	; 0x0a
    1ee8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1eea:	68 85       	ldd	r22, Y+8	; 0x08
    1eec:	79 85       	ldd	r23, Y+9	; 0x09
    1eee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_sendCommand+0x6ba>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9f 83       	std	Y+7, r25	; 0x07
    1f08:	8e 83       	std	Y+6, r24	; 0x06
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_sendCommand+0x738>
	else if (__tmp > 65535)
    1f0c:	68 85       	ldd	r22, Y+8	; 0x08
    1f0e:	79 85       	ldd	r23, Y+9	; 0x09
    1f10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_sendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f26:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9f 83       	std	Y+7, r25	; 0x07
    1f4a:	8e 83       	std	Y+6, r24	; 0x06
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_sendCommand+0x71a>
    1f4e:	89 e1       	ldi	r24, 0x19	; 25
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9d 83       	std	Y+5, r25	; 0x05
    1f54:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_sendCommand+0x708>
    1f5e:	9d 83       	std	Y+5, r25	; 0x05
    1f60:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8e 81       	ldd	r24, Y+6	; 0x06
    1f64:	9f 81       	ldd	r25, Y+7	; 0x07
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9f 83       	std	Y+7, r25	; 0x07
    1f6a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_sendCommand+0x6fc>
    1f74:	24 c0       	rjmp	.+72     	; 0x1fbe <LCD_sendCommand+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	68 85       	ldd	r22, Y+8	; 0x08
    1f78:	79 85       	ldd	r23, Y+9	; 0x09
    1f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9f 83       	std	Y+7, r25	; 0x07
    1f88:	8e 83       	std	Y+6, r24	; 0x06
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	9b 83       	std	Y+3, r25	; 0x03
    1f90:	8a 83       	std	Y+2, r24	; 0x02
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_sendCommand+0x744>
    1f9a:	9b 83       	std	Y+3, r25	; 0x03
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <LCD_sendCommand+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fa0:	69 89       	ldd	r22, Y+17	; 0x11
    1fa2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	88 8b       	std	Y+16, r24	; 0x10
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	8a 95       	dec	r24
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_sendCommand+0x766>
    1fbc:	89 83       	std	Y+1, r24	; 0x01





}
    1fbe:	cf 59       	subi	r28, 0x9F	; 159
    1fc0:	df 4f       	sbci	r29, 0xFF	; 255
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <LCD_displayCharacter>:

void LCD_displayCharacter(unint8 ch)
{
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	c1 56       	subi	r28, 0x61	; 97
    1fe4:	d0 40       	sbci	r29, 0x00	; 0
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ef 59       	subi	r30, 0x9F	; 159
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT , RS);  // mean that will write data
    1ff8:	a8 e3       	ldi	r26, 0x38	; 56
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e8 e3       	ldi	r30, 0x38	; 56
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	81 60       	ori	r24, 0x01	; 1
    2004:	8c 93       	st	X, r24

	CLEAR_BIT(LCD_CTRL_PORT , RW);
    2006:	a8 e3       	ldi	r26, 0x38	; 56
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e8 e3       	ldi	r30, 0x38	; 56
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8d 7f       	andi	r24, 0xFD	; 253
    2012:	8c 93       	st	X, r24
    2014:	fe 01       	movw	r30, r28
    2016:	e3 5a       	subi	r30, 0xA3	; 163
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e8       	ldi	r26, 0x80	; 128
    2020:	bf e3       	ldi	r27, 0x3F	; 63
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	a2 83       	std	Z+2, r26	; 0x02
    2028:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    202a:	8e 01       	movw	r16, r28
    202c:	07 5a       	subi	r16, 0xA7	; 167
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	fe 01       	movw	r30, r28
    2032:	e3 5a       	subi	r30, 0xA3	; 163
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	2b ea       	ldi	r18, 0xAB	; 171
    2040:	3a ea       	ldi	r19, 0xAA	; 170
    2042:	4a ea       	ldi	r20, 0xAA	; 170
    2044:	5e e3       	ldi	r21, 0x3E	; 62
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	80 83       	st	Z, r24
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	a2 83       	std	Z+2, r26	; 0x02
    2056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2058:	fe 01       	movw	r30, r28
    205a:	e7 5a       	subi	r30, 0xA7	; 167
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	34 f4       	brge	.+12     	; 0x2082 <LCD_displayCharacter+0xac>
		__ticks = 1;
    2076:	fe 01       	movw	r30, r28
    2078:	e8 5a       	subi	r30, 0xA8	; 168
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 83       	st	Z, r24
    2080:	e0 c0       	rjmp	.+448    	; 0x2242 <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    2082:	fe 01       	movw	r30, r28
    2084:	e7 5a       	subi	r30, 0xA7	; 167
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	53 e4       	ldi	r21, 0x43	; 67
    2098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	0c f0       	brlt	.+2      	; 0x20a2 <LCD_displayCharacter+0xcc>
    20a0:	c0 c0       	rjmp	.+384    	; 0x2222 <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    20a2:	fe 01       	movw	r30, r28
    20a4:	e3 5a       	subi	r30, 0xA3	; 163
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a e7       	ldi	r20, 0x7A	; 122
    20b6:	54 e4       	ldi	r21, 0x44	; 68
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	fe 01       	movw	r30, r28
    20c2:	ec 5a       	subi	r30, 0xAC	; 172
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	8e 01       	movw	r16, r28
    20d0:	00 5b       	subi	r16, 0xB0	; 176
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	fe 01       	movw	r30, r28
    20d6:	ec 5a       	subi	r30, 0xAC	; 172
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	53 e4       	ldi	r21, 0x43	; 67
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	f8 01       	movw	r30, r16
    20f4:	80 83       	st	Z, r24
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	a2 83       	std	Z+2, r26	; 0x02
    20fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20fc:	fe 01       	movw	r30, r28
    20fe:	e0 5b       	subi	r30, 0xB0	; 176
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	44 f4       	brge	.+16     	; 0x212a <LCD_displayCharacter+0x154>
		__ticks = 1;
    211a:	fe 01       	movw	r30, r28
    211c:	e2 5b       	subi	r30, 0xB2	; 178
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	64 c0       	rjmp	.+200    	; 0x21f2 <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    212a:	fe 01       	movw	r30, r28
    212c:	e0 5b       	subi	r30, 0xB0	; 176
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	3f ef       	ldi	r19, 0xFF	; 255
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	57 e4       	ldi	r21, 0x47	; 71
    2140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2144:	18 16       	cp	r1, r24
    2146:	0c f0       	brlt	.+2      	; 0x214a <LCD_displayCharacter+0x174>
    2148:	43 c0       	rjmp	.+134    	; 0x21d0 <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	fe 01       	movw	r30, r28
    214c:	ec 5a       	subi	r30, 0xAC	; 172
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8e 01       	movw	r16, r28
    216a:	02 5b       	subi	r16, 0xB2	; 178
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	f8 01       	movw	r30, r16
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	1f c0       	rjmp	.+62     	; 0x21c0 <LCD_displayCharacter+0x1ea>
    2182:	fe 01       	movw	r30, r28
    2184:	e4 5b       	subi	r30, 0xB4	; 180
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	89 e1       	ldi	r24, 0x19	; 25
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2190:	fe 01       	movw	r30, r28
    2192:	e4 5b       	subi	r30, 0xB4	; 180
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_displayCharacter+0x1c4>
    219e:	fe 01       	movw	r30, r28
    21a0:	e4 5b       	subi	r30, 0xB4	; 180
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a8:	de 01       	movw	r26, r28
    21aa:	a2 5b       	subi	r26, 0xB2	; 178
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	e2 5b       	subi	r30, 0xB2	; 178
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	9c 93       	st	X, r25
    21be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e2 5b       	subi	r30, 0xB2	; 178
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	d1 f6       	brne	.-76     	; 0x2182 <LCD_displayCharacter+0x1ac>
    21ce:	4b c0       	rjmp	.+150    	; 0x2266 <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	8e 01       	movw	r16, r28
    21d2:	02 5b       	subi	r16, 0xB2	; 178
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	e0 5b       	subi	r30, 0xB0	; 176
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	f8 01       	movw	r30, r16
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
    21f2:	de 01       	movw	r26, r28
    21f4:	a6 5b       	subi	r26, 0xB6	; 182
    21f6:	bf 4f       	sbci	r27, 0xFF	; 255
    21f8:	fe 01       	movw	r30, r28
    21fa:	e2 5b       	subi	r30, 0xB2	; 178
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	9c 93       	st	X, r25
    2206:	8e 93       	st	-X, r24
    2208:	fe 01       	movw	r30, r28
    220a:	e6 5b       	subi	r30, 0xB6	; 182
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_displayCharacter+0x23c>
    2216:	fe 01       	movw	r30, r28
    2218:	e6 5b       	subi	r30, 0xB6	; 182
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	22 c0       	rjmp	.+68     	; 0x2266 <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2222:	8e 01       	movw	r16, r28
    2224:	08 5a       	subi	r16, 0xA8	; 168
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	e7 5a       	subi	r30, 0xA7	; 167
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	80 83       	st	Z, r24
    2242:	de 01       	movw	r26, r28
    2244:	a7 5b       	subi	r26, 0xB7	; 183
    2246:	bf 4f       	sbci	r27, 0xFF	; 255
    2248:	fe 01       	movw	r30, r28
    224a:	e8 5a       	subi	r30, 0xA8	; 168
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2252:	fe 01       	movw	r30, r28
    2254:	e7 5b       	subi	r30, 0xB7	; 183
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	8a 95       	dec	r24
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_displayCharacter+0x284>
    225e:	fe 01       	movw	r30, r28
    2260:	e7 5b       	subi	r30, 0xB7	; 183
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 83       	st	Z, r24

		_delay_us(1);

		SET_BIT(LCD_CTRL_PORT , E);
    2266:	a8 e3       	ldi	r26, 0x38	; 56
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e8 e3       	ldi	r30, 0x38	; 56
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	84 60       	ori	r24, 0x04	; 4
    2272:	8c 93       	st	X, r24
    2274:	fe 01       	movw	r30, r28
    2276:	eb 5b       	subi	r30, 0xBB	; 187
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e8       	ldi	r26, 0x80	; 128
    2280:	bf e3       	ldi	r27, 0x3F	; 63
    2282:	80 83       	st	Z, r24
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	a2 83       	std	Z+2, r26	; 0x02
    2288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228a:	8e 01       	movw	r16, r28
    228c:	0f 5b       	subi	r16, 0xBF	; 191
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	eb 5b       	subi	r30, 0xBB	; 187
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	2b ea       	ldi	r18, 0xAB	; 171
    22a0:	3a ea       	ldi	r19, 0xAA	; 170
    22a2:	4a ea       	ldi	r20, 0xAA	; 170
    22a4:	5e e3       	ldi	r21, 0x3E	; 62
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	a2 83       	std	Z+2, r26	; 0x02
    22b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b8:	fe 01       	movw	r30, r28
    22ba:	ef 5b       	subi	r30, 0xBF	; 191
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	34 f4       	brge	.+12     	; 0x22e2 <LCD_displayCharacter+0x30c>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	fe 01       	movw	r30, r28
    22da:	e0 5c       	subi	r30, 0xC0	; 192
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 83       	st	Z, r24
    22e0:	9d c0       	rjmp	.+314    	; 0x241c <LCD_displayCharacter+0x446>
	else if (__tmp > 255)
    22e2:	fe 01       	movw	r30, r28
    22e4:	ef 5b       	subi	r30, 0xBF	; 191
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	53 e4       	ldi	r21, 0x43	; 67
    22f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <LCD_displayCharacter+0x32c>
    2300:	7e c0       	rjmp	.+252    	; 0x23fe <LCD_displayCharacter+0x428>
	{
		_delay_ms(__us / 1000.0);
    2302:	fe 01       	movw	r30, r28
    2304:	eb 5b       	subi	r30, 0xBB	; 187
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a e7       	ldi	r20, 0x7A	; 122
    2316:	54 e4       	ldi	r21, 0x44	; 68
    2318:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8c af       	std	Y+60, r24	; 0x3c
    2322:	9d af       	std	Y+61, r25	; 0x3d
    2324:	ae af       	std	Y+62, r26	; 0x3e
    2326:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6c ad       	ldd	r22, Y+60	; 0x3c
    232a:	7d ad       	ldd	r23, Y+61	; 0x3d
    232c:	8e ad       	ldd	r24, Y+62	; 0x3e
    232e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	53 e4       	ldi	r21, 0x43	; 67
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	88 af       	std	Y+56, r24	; 0x38
    2342:	99 af       	std	Y+57, r25	; 0x39
    2344:	aa af       	std	Y+58, r26	; 0x3a
    2346:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2348:	68 ad       	ldd	r22, Y+56	; 0x38
    234a:	79 ad       	ldd	r23, Y+57	; 0x39
    234c:	8a ad       	ldd	r24, Y+58	; 0x3a
    234e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_displayCharacter+0x394>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9f ab       	std	Y+55, r25	; 0x37
    2366:	8e ab       	std	Y+54, r24	; 0x36
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_displayCharacter+0x412>
	else if (__tmp > 65535)
    236a:	68 ad       	ldd	r22, Y+56	; 0x38
    236c:	79 ad       	ldd	r23, Y+57	; 0x39
    236e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2370:	9b ad       	ldd	r25, Y+59	; 0x3b
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_displayCharacter+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6c ad       	ldd	r22, Y+60	; 0x3c
    2384:	7d ad       	ldd	r23, Y+61	; 0x3d
    2386:	8e ad       	ldd	r24, Y+62	; 0x3e
    2388:	9f ad       	ldd	r25, Y+63	; 0x3f
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9f ab       	std	Y+55, r25	; 0x37
    23a8:	8e ab       	std	Y+54, r24	; 0x36
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_displayCharacter+0x3f4>
    23ac:	89 e1       	ldi	r24, 0x19	; 25
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9d ab       	std	Y+53, r25	; 0x35
    23b2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b4:	8c a9       	ldd	r24, Y+52	; 0x34
    23b6:	9d a9       	ldd	r25, Y+53	; 0x35
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_displayCharacter+0x3e2>
    23bc:	9d ab       	std	Y+53, r25	; 0x35
    23be:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8e a9       	ldd	r24, Y+54	; 0x36
    23c2:	9f a9       	ldd	r25, Y+55	; 0x37
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9f ab       	std	Y+55, r25	; 0x37
    23c8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8e a9       	ldd	r24, Y+54	; 0x36
    23cc:	9f a9       	ldd	r25, Y+55	; 0x37
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_displayCharacter+0x3d6>
    23d2:	2d c0       	rjmp	.+90     	; 0x242e <LCD_displayCharacter+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	68 ad       	ldd	r22, Y+56	; 0x38
    23d6:	79 ad       	ldd	r23, Y+57	; 0x39
    23d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    23da:	9b ad       	ldd	r25, Y+59	; 0x3b
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9f ab       	std	Y+55, r25	; 0x37
    23e6:	8e ab       	std	Y+54, r24	; 0x36
    23e8:	8e a9       	ldd	r24, Y+54	; 0x36
    23ea:	9f a9       	ldd	r25, Y+55	; 0x37
    23ec:	9b ab       	std	Y+51, r25	; 0x33
    23ee:	8a ab       	std	Y+50, r24	; 0x32
    23f0:	8a a9       	ldd	r24, Y+50	; 0x32
    23f2:	9b a9       	ldd	r25, Y+51	; 0x33
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_displayCharacter+0x41e>
    23f8:	9b ab       	std	Y+51, r25	; 0x33
    23fa:	8a ab       	std	Y+50, r24	; 0x32
    23fc:	18 c0       	rjmp	.+48     	; 0x242e <LCD_displayCharacter+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23fe:	fe 01       	movw	r30, r28
    2400:	ef 5b       	subi	r30, 0xBF	; 191
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	fe 01       	movw	r30, r28
    2416:	e0 5c       	subi	r30, 0xC0	; 192
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 83       	st	Z, r24
    241c:	fe 01       	movw	r30, r28
    241e:	e0 5c       	subi	r30, 0xC0	; 192
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2426:	89 a9       	ldd	r24, Y+49	; 0x31
    2428:	8a 95       	dec	r24
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_displayCharacter+0x452>
    242c:	89 ab       	std	Y+49, r24	; 0x31
			_delay_us(1);


#elif(DATA_BITS_MODE==8)

LCD_DATA_PORT = ch;
    242e:	ab e3       	ldi	r26, 0x3B	; 59
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	fe 01       	movw	r30, r28
    2434:	ef 59       	subi	r30, 0x9F	; 159
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	8c 93       	st	X, r24
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	8d a7       	std	Y+45, r24	; 0x2d
    2446:	9e a7       	std	Y+46, r25	; 0x2e
    2448:	af a7       	std	Y+47, r26	; 0x2f
    244a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    244c:	6d a5       	ldd	r22, Y+45	; 0x2d
    244e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2450:	8f a5       	ldd	r24, Y+47	; 0x2f
    2452:	98 a9       	ldd	r25, Y+48	; 0x30
    2454:	2b ea       	ldi	r18, 0xAB	; 171
    2456:	3a ea       	ldi	r19, 0xAA	; 170
    2458:	4a ea       	ldi	r20, 0xAA	; 170
    245a:	5e e3       	ldi	r21, 0x3E	; 62
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	89 a7       	std	Y+41, r24	; 0x29
    2466:	9a a7       	std	Y+42, r25	; 0x2a
    2468:	ab a7       	std	Y+43, r26	; 0x2b
    246a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    246c:	69 a5       	ldd	r22, Y+41	; 0x29
    246e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2470:	8b a5       	ldd	r24, Y+43	; 0x2b
    2472:	9c a5       	ldd	r25, Y+44	; 0x2c
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	1c f4       	brge	.+6      	; 0x248a <LCD_displayCharacter+0x4b4>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	88 a7       	std	Y+40, r24	; 0x28
    2488:	91 c0       	rjmp	.+290    	; 0x25ac <LCD_displayCharacter+0x5d6>
	else if (__tmp > 255)
    248a:	69 a5       	ldd	r22, Y+41	; 0x29
    248c:	7a a5       	ldd	r23, Y+42	; 0x2a
    248e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2490:	9c a5       	ldd	r25, Y+44	; 0x2c
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	53 e4       	ldi	r21, 0x43	; 67
    249a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	0c f0       	brlt	.+2      	; 0x24a4 <LCD_displayCharacter+0x4ce>
    24a2:	7b c0       	rjmp	.+246    	; 0x259a <LCD_displayCharacter+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    24a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    24a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    24a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24aa:	98 a9       	ldd	r25, Y+48	; 0x30
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a e7       	ldi	r20, 0x7A	; 122
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8c a3       	std	Y+36, r24	; 0x24
    24be:	9d a3       	std	Y+37, r25	; 0x25
    24c0:	ae a3       	std	Y+38, r26	; 0x26
    24c2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c4:	6c a1       	ldd	r22, Y+36	; 0x24
    24c6:	7d a1       	ldd	r23, Y+37	; 0x25
    24c8:	8e a1       	ldd	r24, Y+38	; 0x26
    24ca:	9f a1       	ldd	r25, Y+39	; 0x27
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a e7       	ldi	r20, 0x7A	; 122
    24d2:	53 e4       	ldi	r21, 0x43	; 67
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	88 a3       	std	Y+32, r24	; 0x20
    24de:	99 a3       	std	Y+33, r25	; 0x21
    24e0:	aa a3       	std	Y+34, r26	; 0x22
    24e2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24e4:	68 a1       	ldd	r22, Y+32	; 0x20
    24e6:	79 a1       	ldd	r23, Y+33	; 0x21
    24e8:	8a a1       	ldd	r24, Y+34	; 0x22
    24ea:	9b a1       	ldd	r25, Y+35	; 0x23
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	2c f4       	brge	.+10     	; 0x2506 <LCD_displayCharacter+0x530>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9f 8f       	std	Y+31, r25	; 0x1f
    2502:	8e 8f       	std	Y+30, r24	; 0x1e
    2504:	3f c0       	rjmp	.+126    	; 0x2584 <LCD_displayCharacter+0x5ae>
	else if (__tmp > 65535)
    2506:	68 a1       	ldd	r22, Y+32	; 0x20
    2508:	79 a1       	ldd	r23, Y+33	; 0x21
    250a:	8a a1       	ldd	r24, Y+34	; 0x22
    250c:	9b a1       	ldd	r25, Y+35	; 0x23
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	3f ef       	ldi	r19, 0xFF	; 255
    2512:	4f e7       	ldi	r20, 0x7F	; 127
    2514:	57 e4       	ldi	r21, 0x47	; 71
    2516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251a:	18 16       	cp	r1, r24
    251c:	4c f5       	brge	.+82     	; 0x2570 <LCD_displayCharacter+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251e:	6c a1       	ldd	r22, Y+36	; 0x24
    2520:	7d a1       	ldd	r23, Y+37	; 0x25
    2522:	8e a1       	ldd	r24, Y+38	; 0x26
    2524:	9f a1       	ldd	r25, Y+39	; 0x27
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9f 8f       	std	Y+31, r25	; 0x1f
    2544:	8e 8f       	std	Y+30, r24	; 0x1e
    2546:	0f c0       	rjmp	.+30     	; 0x2566 <LCD_displayCharacter+0x590>
    2548:	89 e1       	ldi	r24, 0x19	; 25
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9d 8f       	std	Y+29, r25	; 0x1d
    254e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2550:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2552:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_displayCharacter+0x57e>
    2558:	9d 8f       	std	Y+29, r25	; 0x1d
    255a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    255e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	9f 8f       	std	Y+31, r25	; 0x1f
    2564:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2566:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2568:	9f 8d       	ldd	r25, Y+31	; 0x1f
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	69 f7       	brne	.-38     	; 0x2548 <LCD_displayCharacter+0x572>
    256e:	24 c0       	rjmp	.+72     	; 0x25b8 <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2570:	68 a1       	ldd	r22, Y+32	; 0x20
    2572:	79 a1       	ldd	r23, Y+33	; 0x21
    2574:	8a a1       	ldd	r24, Y+34	; 0x22
    2576:	9b a1       	ldd	r25, Y+35	; 0x23
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9f 8f       	std	Y+31, r25	; 0x1f
    2582:	8e 8f       	std	Y+30, r24	; 0x1e
    2584:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2586:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2588:	9b 8f       	std	Y+27, r25	; 0x1b
    258a:	8a 8f       	std	Y+26, r24	; 0x1a
    258c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    258e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_displayCharacter+0x5ba>
    2594:	9b 8f       	std	Y+27, r25	; 0x1b
    2596:	8a 8f       	std	Y+26, r24	; 0x1a
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_displayCharacter+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    259a:	69 a5       	ldd	r22, Y+41	; 0x29
    259c:	7a a5       	ldd	r23, Y+42	; 0x2a
    259e:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	88 a7       	std	Y+40, r24	; 0x28
    25ac:	88 a5       	ldd	r24, Y+40	; 0x28
    25ae:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25b0:	89 8d       	ldd	r24, Y+25	; 0x19
    25b2:	8a 95       	dec	r24
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_displayCharacter+0x5dc>
    25b6:	89 8f       	std	Y+25, r24	; 0x19
_delay_us(1);
CLEAR_BIT(LCD_CTRL_PORT ,E);
    25b8:	a8 e3       	ldi	r26, 0x38	; 56
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e8 e3       	ldi	r30, 0x38	; 56
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8b 7f       	andi	r24, 0xFB	; 251
    25c4:	8c 93       	st	X, r24
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a0 e8       	ldi	r26, 0x80	; 128
    25cc:	bf e3       	ldi	r27, 0x3F	; 63
    25ce:	8d 8b       	std	Y+21, r24	; 0x15
    25d0:	9e 8b       	std	Y+22, r25	; 0x16
    25d2:	af 8b       	std	Y+23, r26	; 0x17
    25d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	2b ea       	ldi	r18, 0xAB	; 171
    25e0:	3a ea       	ldi	r19, 0xAA	; 170
    25e2:	4a ea       	ldi	r20, 0xAA	; 170
    25e4:	5e e3       	ldi	r21, 0x3E	; 62
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	89 8b       	std	Y+17, r24	; 0x11
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	ab 8b       	std	Y+19, r26	; 0x13
    25f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25f6:	69 89       	ldd	r22, Y+17	; 0x11
    25f8:	7a 89       	ldd	r23, Y+18	; 0x12
    25fa:	8b 89       	ldd	r24, Y+19	; 0x13
    25fc:	9c 89       	ldd	r25, Y+20	; 0x14
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	1c f4       	brge	.+6      	; 0x2614 <LCD_displayCharacter+0x63e>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	88 8b       	std	Y+16, r24	; 0x10
    2612:	91 c0       	rjmp	.+290    	; 0x2736 <LCD_displayCharacter+0x760>
	else if (__tmp > 255)
    2614:	69 89       	ldd	r22, Y+17	; 0x11
    2616:	7a 89       	ldd	r23, Y+18	; 0x12
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	53 e4       	ldi	r21, 0x43	; 67
    2624:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	0c f0       	brlt	.+2      	; 0x262e <LCD_displayCharacter+0x658>
    262c:	7b c0       	rjmp	.+246    	; 0x2724 <LCD_displayCharacter+0x74e>
	{
		_delay_ms(__us / 1000.0);
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a e7       	ldi	r20, 0x7A	; 122
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8c 87       	std	Y+12, r24	; 0x0c
    2648:	9d 87       	std	Y+13, r25	; 0x0d
    264a:	ae 87       	std	Y+14, r26	; 0x0e
    264c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2650:	7d 85       	ldd	r23, Y+13	; 0x0d
    2652:	8e 85       	ldd	r24, Y+14	; 0x0e
    2654:	9f 85       	ldd	r25, Y+15	; 0x0f
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4a e7       	ldi	r20, 0x7A	; 122
    265c:	53 e4       	ldi	r21, 0x43	; 67
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	88 87       	std	Y+8, r24	; 0x08
    2668:	99 87       	std	Y+9, r25	; 0x09
    266a:	aa 87       	std	Y+10, r26	; 0x0a
    266c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    266e:	68 85       	ldd	r22, Y+8	; 0x08
    2670:	79 85       	ldd	r23, Y+9	; 0x09
    2672:	8a 85       	ldd	r24, Y+10	; 0x0a
    2674:	9b 85       	ldd	r25, Y+11	; 0x0b
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	2c f4       	brge	.+10     	; 0x2690 <LCD_displayCharacter+0x6ba>
		__ticks = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9f 83       	std	Y+7, r25	; 0x07
    268c:	8e 83       	std	Y+6, r24	; 0x06
    268e:	3f c0       	rjmp	.+126    	; 0x270e <LCD_displayCharacter+0x738>
	else if (__tmp > 65535)
    2690:	68 85       	ldd	r22, Y+8	; 0x08
    2692:	79 85       	ldd	r23, Y+9	; 0x09
    2694:	8a 85       	ldd	r24, Y+10	; 0x0a
    2696:	9b 85       	ldd	r25, Y+11	; 0x0b
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	4c f5       	brge	.+82     	; 0x26fa <LCD_displayCharacter+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    26aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    26ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	51 e4       	ldi	r21, 0x41	; 65
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9f 83       	std	Y+7, r25	; 0x07
    26ce:	8e 83       	std	Y+6, r24	; 0x06
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <LCD_displayCharacter+0x71a>
    26d2:	89 e1       	ldi	r24, 0x19	; 25
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9d 83       	std	Y+5, r25	; 0x05
    26d8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	9d 81       	ldd	r25, Y+5	; 0x05
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_displayCharacter+0x708>
    26e2:	9d 83       	std	Y+5, r25	; 0x05
    26e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	8e 81       	ldd	r24, Y+6	; 0x06
    26e8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	9f 83       	std	Y+7, r25	; 0x07
    26ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	8e 81       	ldd	r24, Y+6	; 0x06
    26f2:	9f 81       	ldd	r25, Y+7	; 0x07
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	69 f7       	brne	.-38     	; 0x26d2 <LCD_displayCharacter+0x6fc>
    26f8:	24 c0       	rjmp	.+72     	; 0x2742 <LCD_displayCharacter+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fa:	68 85       	ldd	r22, Y+8	; 0x08
    26fc:	79 85       	ldd	r23, Y+9	; 0x09
    26fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2700:	9b 85       	ldd	r25, Y+11	; 0x0b
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9f 83       	std	Y+7, r25	; 0x07
    270c:	8e 83       	std	Y+6, r24	; 0x06
    270e:	8e 81       	ldd	r24, Y+6	; 0x06
    2710:	9f 81       	ldd	r25, Y+7	; 0x07
    2712:	9b 83       	std	Y+3, r25	; 0x03
    2714:	8a 83       	std	Y+2, r24	; 0x02
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	9b 81       	ldd	r25, Y+3	; 0x03
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_displayCharacter+0x744>
    271e:	9b 83       	std	Y+3, r25	; 0x03
    2720:	8a 83       	std	Y+2, r24	; 0x02
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <LCD_displayCharacter+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2724:	69 89       	ldd	r22, Y+17	; 0x11
    2726:	7a 89       	ldd	r23, Y+18	; 0x12
    2728:	8b 89       	ldd	r24, Y+19	; 0x13
    272a:	9c 89       	ldd	r25, Y+20	; 0x14
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	88 8b       	std	Y+16, r24	; 0x10
    2736:	88 89       	ldd	r24, Y+16	; 0x10
    2738:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	8a 95       	dec	r24
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_displayCharacter+0x766>
    2740:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

#endif

	}
    2742:	cf 59       	subi	r28, 0x9F	; 159
    2744:	df 4f       	sbci	r29, 0xFF	; 255
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	08 95       	ret

0000275a <LCD_displayString>:

void LCD_displayString(const unint8 *str)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <LCD_displayString+0x6>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9b 83       	std	Y+3, r25	; 0x03
    2768:	8a 83       	std	Y+2, r24	; 0x02
	unint8 i=0;
    276a:	19 82       	std	Y+1, r1	; 0x01
    276c:	0e c0       	rjmp	.+28     	; 0x278a <LCD_displayString+0x30>

	while(str[i] !='\0')
	{

		LCD_displayCharacter(str[i]);
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	fc 01       	movw	r30, r24
    277a:	e2 0f       	add	r30, r18
    277c:	f3 1f       	adc	r31, r19
    277e:	80 81       	ld	r24, Z
    2780:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <LCD_displayCharacter>

		i++;
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString(const unint8 *str)
{
	unint8 i=0;

	while(str[i] !='\0')
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	fc 01       	movw	r30, r24
    2796:	e2 0f       	add	r30, r18
    2798:	f3 1f       	adc	r31, r19
    279a:	80 81       	ld	r24, Z
    279c:	88 23       	and	r24, r24
    279e:	39 f7       	brne	.-50     	; 0x276e <LCD_displayString+0x14>

		i++;
	}


}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <LCD_goToRowColum>:
void LCD_goToRowColum(unint8 row , unint8 colum)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <LCD_goToRowColum+0x6>
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <LCD_goToRowColum+0x8>
    27b4:	0f 92       	push	r0
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	8a 83       	std	Y+2, r24	; 0x02
    27bc:	6b 83       	std	Y+3, r22	; 0x03
	unint8 Address;

	switch(row)
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	3d 83       	std	Y+5, r19	; 0x05
    27c6:	2c 83       	std	Y+4, r18	; 0x04
    27c8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ca:	9d 81       	ldd	r25, Y+5	; 0x05
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	31 f0       	breq	.+12     	; 0x27dc <LCD_goToRowColum+0x30>
    27d0:	2c 81       	ldd	r18, Y+4	; 0x04
    27d2:	3d 81       	ldd	r19, Y+5	; 0x05
    27d4:	21 30       	cpi	r18, 0x01	; 1
    27d6:	31 05       	cpc	r19, r1
    27d8:	21 f0       	breq	.+8      	; 0x27e2 <LCD_goToRowColum+0x36>
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <LCD_goToRowColum+0x3c>
	{

	case 0:
		Address =colum;
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <LCD_goToRowColum+0x3c>
		break;
	case 1:
		Address = colum + 0x40;
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	80 5c       	subi	r24, 0xC0	; 192
    27e6:	89 83       	std	Y+1, r24	; 0x01
		break;


	}

	LCD_sendCommand(Address + SET_CURSOR_LOCATION);
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	80 58       	subi	r24, 0x80	; 128
    27ec:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>



}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <LCD_displayStringOnRowColum>:

void LCD_displayStringOnRowColum(unint8 row , unint8 colum , const unint8 *str)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <LCD_displayStringOnRowColum+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <LCD_displayStringOnRowColum+0x8>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	6a 83       	std	Y+2, r22	; 0x02
    2810:	5c 83       	std	Y+4, r21	; 0x04
    2812:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColum(row , colum);
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	6a 81       	ldd	r22, Y+2	; 0x02
    2818:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_goToRowColum>
	LCD_displayString(str);
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_displayString>





}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <LCD_clear_screen>:



void LCD_clear_screen(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>

}
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	62 97       	sbiw	r28, 0x12	; 18
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	9a 8b       	std	Y+18, r25	; 0x12
    285c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    285e:	89 89       	ldd	r24, Y+17	; 0x11
    2860:	9a 89       	ldd	r25, Y+18	; 0x12
    2862:	9e 01       	movw	r18, r28
    2864:	2f 5f       	subi	r18, 0xFF	; 255
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	b9 01       	movw	r22, r18
    286a:	4a e0       	ldi	r20, 0x0A	; 10
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <itoa>
   LCD_displayString(buff);
    2872:	ce 01       	movw	r24, r28
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_displayString>
}
    287a:	62 96       	adiw	r28, 0x12	; 18
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <LCD_store_pattren>:

void LCD_store_pattren(unint8 *pattren , unint8 indix)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <LCD_store_pattren+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <LCD_store_pattren+0x8>
    2894:	0f 92       	push	r0
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
    289e:	6d 83       	std	Y+5, r22	; 0x05
	unint8 address , i;

	address=indix * 8;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	8a 83       	std	Y+2, r24	; 0x02

	LCD_sendCommand(address | SET_CGRAM_ADDRESS);
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	80 64       	ori	r24, 0x40	; 64
    28b8:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>

	for(i=0 ; i< 8 ; i++ )
    28bc:	19 82       	std	Y+1, r1	; 0x01
    28be:	0e c0       	rjmp	.+28     	; 0x28dc <LCD_store_pattren+0x50>
	{
		LCD_displayCharacter(pattren[i]);
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	fc 01       	movw	r30, r24
    28cc:	e2 0f       	add	r30, r18
    28ce:	f3 1f       	adc	r31, r19
    28d0:	80 81       	ld	r24, Z
    28d2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <LCD_displayCharacter>

	address=indix * 8;

	LCD_sendCommand(address | SET_CGRAM_ADDRESS);

	for(i=0 ; i< 8 ; i++ )
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	8f 5f       	subi	r24, 0xFF	; 255
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	88 30       	cpi	r24, 0x08	; 8
    28e0:	78 f3       	brcs	.-34     	; 0x28c0 <LCD_store_pattren+0x34>
	{
		LCD_displayCharacter(pattren[i]);

	}

	LCD_sendCommand(RETURN_HOME);
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_sendCommand>

}
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <main>:

#include"DOOR_LOCK.h"

unint8 mode ;
int main(void)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
	door_lock_init();
    2900:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <door_lock_init>
	while(1)
	{
		if(!SYSTEM_STATE())
    2904:	e3 e3       	ldi	r30, 0x33	; 51
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	88 70       	andi	r24, 0x08	; 8
    2910:	90 70       	andi	r25, 0x00	; 0
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	b9 f7       	brne	.-18     	; 0x2904 <main+0xc>
		{
		    LCD_displayStringOnRowColum(0 , 0 , "+ NEW PASSWARD MODE");
    2916:	25 e9       	ldi	r18, 0x95	; 149
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	a9 01       	movw	r20, r18
    2920:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
		    LCD_displayStringOnRowColum(1 , 0 , "- OLD PASSWARD MODE");
    2924:	29 ea       	ldi	r18, 0xA9	; 169
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	a9 01       	movw	r20, r18
    292e:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
            mode=check_mode();
    2932:	0e 94 01 09 	call	0x1202	; 0x1202 <check_mode>
    2936:	80 93 20 01 	sts	0x0120, r24
            if(mode == '-')
    293a:	80 91 20 01 	lds	r24, 0x0120
    293e:	8d 32       	cpi	r24, 0x2D	; 45
    2940:	81 f4       	brne	.+32     	; 0x2962 <main+0x6a>
            {
            	do
            	{
            	LCD_clear_screen();
    2942:	0e 94 19 14 	call	0x2832	; 0x2832 <LCD_clear_screen>
    		    LCD_displayStringOnRowColum(0 , 0 , "ENTER THE PASSWARD");
    2946:	2d eb       	ldi	r18, 0xBD	; 189
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	a9 01       	movw	r20, r18
    2950:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
    		    scan_password();
    2954:	0e 94 b6 08 	call	0x116c	; 0x116c <scan_password>
            	}while(!check_password());
    2958:	0e 94 da 08 	call	0x11b4	; 0x11b4 <check_password>
    295c:	88 23       	and	r24, r24
    295e:	89 f3       	breq	.-30     	; 0x2942 <main+0x4a>
    2960:	18 c0       	rjmp	.+48     	; 0x2992 <main+0x9a>
            }
            else if('+')
            {
                do
                {
            	LCD_clear_screen();
    2962:	0e 94 19 14 	call	0x2832	; 0x2832 <LCD_clear_screen>
    		    LCD_displayStringOnRowColum(0 , 0 , "ENTER THE OLD PASSWARD");
    2966:	20 ed       	ldi	r18, 0xD0	; 208
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	a9 01       	movw	r20, r18
    2970:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
    		    scan_password();
    2974:	0e 94 b6 08 	call	0x116c	; 0x116c <scan_password>
            	}while(!check_password());
    2978:	0e 94 da 08 	call	0x11b4	; 0x11b4 <check_password>
    297c:	88 23       	and	r24, r24
    297e:	89 f3       	breq	.-30     	; 0x2962 <main+0x6a>
    		    LCD_displayStringOnRowColum(0 , 0 , "ENTER THE NEW PASSWARD");
    2980:	27 ee       	ldi	r18, 0xE7	; 231
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	a9 01       	movw	r20, r18
    298a:	0e 94 00 14 	call	0x2800	; 0x2800 <LCD_displayStringOnRowColum>
    		    scan_new_password();
    298e:	0e 94 2c 09 	call	0x1258	; 0x1258 <scan_new_password>
            }
            open_the_door();
    2992:	0e 94 0e 09 	call	0x121c	; 0x121c <open_the_door>
            while(!CHECK_DOOR_STATE());
    2996:	e3 e3       	ldi	r30, 0x33	; 51
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	84 70       	andi	r24, 0x04	; 4
    29a2:	90 70       	andi	r25, 0x00	; 0
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	b9 f3       	breq	.-18     	; 0x2996 <main+0x9e>
    29a8:	ad cf       	rjmp	.-166    	; 0x2904 <main+0xc>

000029aa <__prologue_saves__>:
    29aa:	2f 92       	push	r2
    29ac:	3f 92       	push	r3
    29ae:	4f 92       	push	r4
    29b0:	5f 92       	push	r5
    29b2:	6f 92       	push	r6
    29b4:	7f 92       	push	r7
    29b6:	8f 92       	push	r8
    29b8:	9f 92       	push	r9
    29ba:	af 92       	push	r10
    29bc:	bf 92       	push	r11
    29be:	cf 92       	push	r12
    29c0:	df 92       	push	r13
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	ca 1b       	sub	r28, r26
    29d4:	db 0b       	sbc	r29, r27
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	09 94       	ijmp

000029e2 <__epilogue_restores__>:
    29e2:	2a 88       	ldd	r2, Y+18	; 0x12
    29e4:	39 88       	ldd	r3, Y+17	; 0x11
    29e6:	48 88       	ldd	r4, Y+16	; 0x10
    29e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    29f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29f4:	b9 84       	ldd	r11, Y+9	; 0x09
    29f6:	c8 84       	ldd	r12, Y+8	; 0x08
    29f8:	df 80       	ldd	r13, Y+7	; 0x07
    29fa:	ee 80       	ldd	r14, Y+6	; 0x06
    29fc:	fd 80       	ldd	r15, Y+5	; 0x05
    29fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2a00:	1b 81       	ldd	r17, Y+3	; 0x03
    2a02:	aa 81       	ldd	r26, Y+2	; 0x02
    2a04:	b9 81       	ldd	r27, Y+1	; 0x01
    2a06:	ce 0f       	add	r28, r30
    2a08:	d1 1d       	adc	r29, r1
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	ed 01       	movw	r28, r26
    2a16:	08 95       	ret

00002a18 <itoa>:
    2a18:	fb 01       	movw	r30, r22
    2a1a:	9f 01       	movw	r18, r30
    2a1c:	e8 94       	clt
    2a1e:	42 30       	cpi	r20, 0x02	; 2
    2a20:	c4 f0       	brlt	.+48     	; 0x2a52 <itoa+0x3a>
    2a22:	45 32       	cpi	r20, 0x25	; 37
    2a24:	b4 f4       	brge	.+44     	; 0x2a52 <itoa+0x3a>
    2a26:	4a 30       	cpi	r20, 0x0A	; 10
    2a28:	29 f4       	brne	.+10     	; 0x2a34 <itoa+0x1c>
    2a2a:	97 fb       	bst	r25, 7
    2a2c:	1e f4       	brtc	.+6      	; 0x2a34 <itoa+0x1c>
    2a2e:	90 95       	com	r25
    2a30:	81 95       	neg	r24
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	64 2f       	mov	r22, r20
    2a36:	77 27       	eor	r23, r23
    2a38:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__udivmodhi4>
    2a3c:	80 5d       	subi	r24, 0xD0	; 208
    2a3e:	8a 33       	cpi	r24, 0x3A	; 58
    2a40:	0c f0       	brlt	.+2      	; 0x2a44 <itoa+0x2c>
    2a42:	89 5d       	subi	r24, 0xD9	; 217
    2a44:	81 93       	st	Z+, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	a1 f7       	brne	.-24     	; 0x2a34 <itoa+0x1c>
    2a4c:	16 f4       	brtc	.+4      	; 0x2a52 <itoa+0x3a>
    2a4e:	5d e2       	ldi	r21, 0x2D	; 45
    2a50:	51 93       	st	Z+, r21
    2a52:	10 82       	st	Z, r1
    2a54:	c9 01       	movw	r24, r18
    2a56:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <strrev>

00002a5a <strrev>:
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	67 2f       	mov	r22, r23
    2a60:	71 91       	ld	r23, Z+
    2a62:	77 23       	and	r23, r23
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <strrev+0x4>
    2a66:	32 97       	sbiw	r30, 0x02	; 2
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <strrev+0x18>
    2a6a:	7c 91       	ld	r23, X
    2a6c:	6d 93       	st	X+, r22
    2a6e:	70 83       	st	Z, r23
    2a70:	62 91       	ld	r22, -Z
    2a72:	ae 17       	cp	r26, r30
    2a74:	bf 07       	cpc	r27, r31
    2a76:	c8 f3       	brcs	.-14     	; 0x2a6a <strrev+0x10>
    2a78:	08 95       	ret

00002a7a <__udivmodhi4>:
    2a7a:	aa 1b       	sub	r26, r26
    2a7c:	bb 1b       	sub	r27, r27
    2a7e:	51 e1       	ldi	r21, 0x11	; 17
    2a80:	07 c0       	rjmp	.+14     	; 0x2a90 <__udivmodhi4_ep>

00002a82 <__udivmodhi4_loop>:
    2a82:	aa 1f       	adc	r26, r26
    2a84:	bb 1f       	adc	r27, r27
    2a86:	a6 17       	cp	r26, r22
    2a88:	b7 07       	cpc	r27, r23
    2a8a:	10 f0       	brcs	.+4      	; 0x2a90 <__udivmodhi4_ep>
    2a8c:	a6 1b       	sub	r26, r22
    2a8e:	b7 0b       	sbc	r27, r23

00002a90 <__udivmodhi4_ep>:
    2a90:	88 1f       	adc	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	5a 95       	dec	r21
    2a96:	a9 f7       	brne	.-22     	; 0x2a82 <__udivmodhi4_loop>
    2a98:	80 95       	com	r24
    2a9a:	90 95       	com	r25
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	08 95       	ret

00002aa2 <_exit>:
    2aa2:	f8 94       	cli

00002aa4 <__stop_program>:
    2aa4:	ff cf       	rjmp	.-2      	; 0x2aa4 <__stop_program>
